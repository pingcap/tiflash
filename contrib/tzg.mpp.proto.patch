diff --git a/pkg/mpp/mpp.pb.go b/pkg/mpp/mpp.pb.go
index 16fd5dd..63a6d6c 100644
--- a/pkg/mpp/mpp.pb.go
+++ b/pkg/mpp/mpp.pb.go
@@ -26,12 +26,89 @@ var _ = math.Inf
 // proto package needs to be updated.
 const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package
 
+// Data compression method
+type CompressMethod int32
+
+const (
+	CompressMethod_NONE CompressMethod = 0
+	CompressMethod_LZ4  CompressMethod = 1
+	CompressMethod_ZSTD CompressMethod = 2
+)
+
+var CompressMethod_name = map[int32]string{
+	0: "NONE",
+	1: "LZ4",
+	2: "ZSTD",
+}
+
+var CompressMethod_value = map[string]int32{
+	"NONE": 0,
+	"LZ4":  1,
+	"ZSTD": 2,
+}
+
+func (x CompressMethod) String() string {
+	return proto.EnumName(CompressMethod_name, int32(x))
+}
+
+func (CompressMethod) EnumDescriptor() ([]byte, []int) {
+	return fileDescriptor_819623c7fa76fc55, []int{0}
+}
+
+type ExchangeSenderMeta struct {
+	Compress             CompressMethod `protobuf:"varint,1,opt,name=compress,proto3,enum=mpp.CompressMethod" json:"compress,omitempty"`
+	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
+	XXX_unrecognized     []byte         `json:"-"`
+	XXX_sizecache        int32          `json:"-"`
+}
+
+func (m *ExchangeSenderMeta) Reset()         { *m = ExchangeSenderMeta{} }
+func (m *ExchangeSenderMeta) String() string { return proto.CompactTextString(m) }
+func (*ExchangeSenderMeta) ProtoMessage()    {}
+func (*ExchangeSenderMeta) Descriptor() ([]byte, []int) {
+	return fileDescriptor_819623c7fa76fc55, []int{0}
+}
+func (m *ExchangeSenderMeta) XXX_Unmarshal(b []byte) error {
+	return m.Unmarshal(b)
+}
+func (m *ExchangeSenderMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
+	if deterministic {
+		return xxx_messageInfo_ExchangeSenderMeta.Marshal(b, m, deterministic)
+	} else {
+		b = b[:cap(b)]
+		n, err := m.MarshalToSizedBuffer(b)
+		if err != nil {
+			return nil, err
+		}
+		return b[:n], nil
+	}
+}
+func (m *ExchangeSenderMeta) XXX_Merge(src proto.Message) {
+	xxx_messageInfo_ExchangeSenderMeta.Merge(m, src)
+}
+func (m *ExchangeSenderMeta) XXX_Size() int {
+	return m.Size()
+}
+func (m *ExchangeSenderMeta) XXX_DiscardUnknown() {
+	xxx_messageInfo_ExchangeSenderMeta.DiscardUnknown(m)
+}
+
+var xxx_messageInfo_ExchangeSenderMeta proto.InternalMessageInfo
+
+func (m *ExchangeSenderMeta) GetCompress() CompressMethod {
+	if m != nil {
+		return m.Compress
+	}
+	return CompressMethod_NONE
+}
+
 // TaskMeta contains meta of a mpp plan, including query's ts and task address.
 type TaskMeta struct {
 	StartTs              uint64   `protobuf:"varint,1,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
 	TaskId               int64    `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
 	PartitionId          int64    `protobuf:"varint,3,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
 	Address              string   `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
+	MppVersion           int64    `protobuf:"varint,5,opt,name=mpp_version,json=mppVersion,proto3" json:"mpp_version,omitempty"`
 	XXX_NoUnkeyedLiteral struct{} `json:"-"`
 	XXX_unrecognized     []byte   `json:"-"`
 	XXX_sizecache        int32    `json:"-"`
@@ -41,7 +118,7 @@ func (m *TaskMeta) Reset()         { *m = TaskMeta{} }
 func (m *TaskMeta) String() string { return proto.CompactTextString(m) }
 func (*TaskMeta) ProtoMessage()    {}
 func (*TaskMeta) Descriptor() ([]byte, []int) {
-	return fileDescriptor_819623c7fa76fc55, []int{0}
+	return fileDescriptor_819623c7fa76fc55, []int{1}
 }
 func (m *TaskMeta) XXX_Unmarshal(b []byte) error {
 	return m.Unmarshal(b)
@@ -98,6 +175,13 @@ func (m *TaskMeta) GetAddress() string {
 	return ""
 }
 
+func (m *TaskMeta) GetMppVersion() int64 {
+	if m != nil {
+		return m.MppVersion
+	}
+	return 0
+}
+
 type IsAliveRequest struct {
 	XXX_NoUnkeyedLiteral struct{} `json:"-"`
 	XXX_unrecognized     []byte   `json:"-"`
@@ -108,7 +192,7 @@ func (m *IsAliveRequest) Reset()         { *m = IsAliveRequest{} }
 func (m *IsAliveRequest) String() string { return proto.CompactTextString(m) }
 func (*IsAliveRequest) ProtoMessage()    {}
 func (*IsAliveRequest) Descriptor() ([]byte, []int) {
-	return fileDescriptor_819623c7fa76fc55, []int{1}
+	return fileDescriptor_819623c7fa76fc55, []int{2}
 }
 func (m *IsAliveRequest) XXX_Unmarshal(b []byte) error {
 	return m.Unmarshal(b)
@@ -139,6 +223,7 @@ var xxx_messageInfo_IsAliveRequest proto.InternalMessageInfo
 
 type IsAliveResponse struct {
 	Available            bool     `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
+	MppVersion           int64    `protobuf:"varint,2,opt,name=mpp_version,json=mppVersion,proto3" json:"mpp_version,omitempty"`
 	XXX_NoUnkeyedLiteral struct{} `json:"-"`
 	XXX_unrecognized     []byte   `json:"-"`
 	XXX_sizecache        int32    `json:"-"`
@@ -148,7 +233,7 @@ func (m *IsAliveResponse) Reset()         { *m = IsAliveResponse{} }
 func (m *IsAliveResponse) String() string { return proto.CompactTextString(m) }
 func (*IsAliveResponse) ProtoMessage()    {}
 func (*IsAliveResponse) Descriptor() ([]byte, []int) {
-	return fileDescriptor_819623c7fa76fc55, []int{2}
+	return fileDescriptor_819623c7fa76fc55, []int{3}
 }
 func (m *IsAliveResponse) XXX_Unmarshal(b []byte) error {
 	return m.Unmarshal(b)
@@ -184,6 +269,13 @@ func (m *IsAliveResponse) GetAvailable() bool {
 	return false
 }
 
+func (m *IsAliveResponse) GetMppVersion() int64 {
+	if m != nil {
+		return m.MppVersion
+	}
+	return 0
+}
+
 // Dipsatch the task request to different tiflash servers.
 type DispatchTaskRequest struct {
 	Meta        *TaskMeta                 `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
@@ -193,17 +285,19 @@ type DispatchTaskRequest struct {
 	// If this task contains table scan, we still need their region info.
 	SchemaVer int64 `protobuf:"varint,5,opt,name=schema_ver,json=schemaVer,proto3" json:"schema_ver,omitempty"`
 	// Used for partition table scan
-	TableRegions         []*coprocessor.TableRegions `protobuf:"bytes,6,rep,name=table_regions,json=tableRegions,proto3" json:"table_regions,omitempty"`
-	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
-	XXX_unrecognized     []byte                      `json:"-"`
-	XXX_sizecache        int32                       `json:"-"`
+	TableRegions []*coprocessor.TableRegions `protobuf:"bytes,6,rep,name=table_regions,json=tableRegions,proto3" json:"table_regions,omitempty"`
+	// Used for exchange sender
+	ExchangeSenderMeta   *ExchangeSenderMeta `protobuf:"bytes,7,opt,name=exchange_sender_meta,json=exchangeSenderMeta,proto3" json:"exchange_sender_meta,omitempty"`
+	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
+	XXX_unrecognized     []byte              `json:"-"`
+	XXX_sizecache        int32               `json:"-"`
 }
 
 func (m *DispatchTaskRequest) Reset()         { *m = DispatchTaskRequest{} }
 func (m *DispatchTaskRequest) String() string { return proto.CompactTextString(m) }
 func (*DispatchTaskRequest) ProtoMessage()    {}
 func (*DispatchTaskRequest) Descriptor() ([]byte, []int) {
-	return fileDescriptor_819623c7fa76fc55, []int{3}
+	return fileDescriptor_819623c7fa76fc55, []int{4}
 }
 func (m *DispatchTaskRequest) XXX_Unmarshal(b []byte) error {
 	return m.Unmarshal(b)
@@ -274,6 +368,13 @@ func (m *DispatchTaskRequest) GetTableRegions() []*coprocessor.TableRegions {
 	return nil
 }
 
+func (m *DispatchTaskRequest) GetExchangeSenderMeta() *ExchangeSenderMeta {
+	if m != nil {
+		return m.ExchangeSenderMeta
+	}
+	return nil
+}
+
 // Get response of DispatchTaskRequest.
 type DispatchTaskResponse struct {
 	Error                *Error           `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
@@ -287,7 +388,7 @@ func (m *DispatchTaskResponse) Reset()         { *m = DispatchTaskResponse{} }
 func (m *DispatchTaskResponse) String() string { return proto.CompactTextString(m) }
 func (*DispatchTaskResponse) ProtoMessage()    {}
 func (*DispatchTaskResponse) Descriptor() ([]byte, []int) {
-	return fileDescriptor_819623c7fa76fc55, []int{4}
+	return fileDescriptor_819623c7fa76fc55, []int{5}
 }
 func (m *DispatchTaskResponse) XXX_Unmarshal(b []byte) error {
 	return m.Unmarshal(b)
@@ -343,7 +444,7 @@ func (m *CancelTaskRequest) Reset()         { *m = CancelTaskRequest{} }
 func (m *CancelTaskRequest) String() string { return proto.CompactTextString(m) }
 func (*CancelTaskRequest) ProtoMessage()    {}
 func (*CancelTaskRequest) Descriptor() ([]byte, []int) {
-	return fileDescriptor_819623c7fa76fc55, []int{5}
+	return fileDescriptor_819623c7fa76fc55, []int{6}
 }
 func (m *CancelTaskRequest) XXX_Unmarshal(b []byte) error {
 	return m.Unmarshal(b)
@@ -397,7 +498,7 @@ func (m *CancelTaskResponse) Reset()         { *m = CancelTaskResponse{} }
 func (m *CancelTaskResponse) String() string { return proto.CompactTextString(m) }
 func (*CancelTaskResponse) ProtoMessage()    {}
 func (*CancelTaskResponse) Descriptor() ([]byte, []int) {
-	return fileDescriptor_819623c7fa76fc55, []int{6}
+	return fileDescriptor_819623c7fa76fc55, []int{7}
 }
 func (m *CancelTaskResponse) XXX_Unmarshal(b []byte) error {
 	return m.Unmarshal(b)
@@ -446,7 +547,7 @@ func (m *EstablishMPPConnectionRequest) Reset()         { *m = EstablishMPPConne
 func (m *EstablishMPPConnectionRequest) String() string { return proto.CompactTextString(m) }
 func (*EstablishMPPConnectionRequest) ProtoMessage()    {}
 func (*EstablishMPPConnectionRequest) Descriptor() ([]byte, []int) {
-	return fileDescriptor_819623c7fa76fc55, []int{7}
+	return fileDescriptor_819623c7fa76fc55, []int{8}
 }
 func (m *EstablishMPPConnectionRequest) XXX_Unmarshal(b []byte) error {
 	return m.Unmarshal(b)
@@ -489,23 +590,71 @@ func (m *EstablishMPPConnectionRequest) GetReceiverMeta() *TaskMeta {
 	return nil
 }
 
+type CompressMeta struct {
+	Method               CompressMethod `protobuf:"varint,1,opt,name=method,proto3,enum=mpp.CompressMethod" json:"method,omitempty"`
+	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
+	XXX_unrecognized     []byte         `json:"-"`
+	XXX_sizecache        int32          `json:"-"`
+}
+
+func (m *CompressMeta) Reset()         { *m = CompressMeta{} }
+func (m *CompressMeta) String() string { return proto.CompactTextString(m) }
+func (*CompressMeta) ProtoMessage()    {}
+func (*CompressMeta) Descriptor() ([]byte, []int) {
+	return fileDescriptor_819623c7fa76fc55, []int{9}
+}
+func (m *CompressMeta) XXX_Unmarshal(b []byte) error {
+	return m.Unmarshal(b)
+}
+func (m *CompressMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
+	if deterministic {
+		return xxx_messageInfo_CompressMeta.Marshal(b, m, deterministic)
+	} else {
+		b = b[:cap(b)]
+		n, err := m.MarshalToSizedBuffer(b)
+		if err != nil {
+			return nil, err
+		}
+		return b[:n], nil
+	}
+}
+func (m *CompressMeta) XXX_Merge(src proto.Message) {
+	xxx_messageInfo_CompressMeta.Merge(m, src)
+}
+func (m *CompressMeta) XXX_Size() int {
+	return m.Size()
+}
+func (m *CompressMeta) XXX_DiscardUnknown() {
+	xxx_messageInfo_CompressMeta.DiscardUnknown(m)
+}
+
+var xxx_messageInfo_CompressMeta proto.InternalMessageInfo
+
+func (m *CompressMeta) GetMethod() CompressMethod {
+	if m != nil {
+		return m.Method
+	}
+	return CompressMethod_NONE
+}
+
 // when TiFlash sends data to TiDB, Data packets wrap tipb.SelectResponse, i.e., serialize tipb.SelectResponse into data;
 // when TiFlash sends data to TiFlash, data blocks are serialized into chunks, and the execution_summaries in tipb.SelectResponse are serialized into data only for the last packet.
 type MPPDataPacket struct {
-	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
-	Error                *Error   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
-	Chunks               [][]byte `protobuf:"bytes,3,rep,name=chunks,proto3" json:"chunks,omitempty"`
-	StreamIds            []uint64 `protobuf:"varint,4,rep,packed,name=stream_ids,json=streamIds,proto3" json:"stream_ids,omitempty"`
-	XXX_NoUnkeyedLiteral struct{} `json:"-"`
-	XXX_unrecognized     []byte   `json:"-"`
-	XXX_sizecache        int32    `json:"-"`
+	Data                 []byte        `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
+	Error                *Error        `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
+	Chunks               [][]byte      `protobuf:"bytes,3,rep,name=chunks,proto3" json:"chunks,omitempty"`
+	StreamIds            []uint64      `protobuf:"varint,4,rep,packed,name=stream_ids,json=streamIds,proto3" json:"stream_ids,omitempty"`
+	Compress             *CompressMeta `protobuf:"bytes,5,opt,name=compress,proto3" json:"compress,omitempty"`
+	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
+	XXX_unrecognized     []byte        `json:"-"`
+	XXX_sizecache        int32         `json:"-"`
 }
 
 func (m *MPPDataPacket) Reset()         { *m = MPPDataPacket{} }
 func (m *MPPDataPacket) String() string { return proto.CompactTextString(m) }
 func (*MPPDataPacket) ProtoMessage()    {}
 func (*MPPDataPacket) Descriptor() ([]byte, []int) {
-	return fileDescriptor_819623c7fa76fc55, []int{8}
+	return fileDescriptor_819623c7fa76fc55, []int{10}
 }
 func (m *MPPDataPacket) XXX_Unmarshal(b []byte) error {
 	return m.Unmarshal(b)
@@ -562,6 +711,13 @@ func (m *MPPDataPacket) GetStreamIds() []uint64 {
 	return nil
 }
 
+func (m *MPPDataPacket) GetCompress() *CompressMeta {
+	if m != nil {
+		return m.Compress
+	}
+	return nil
+}
+
 type Error struct {
 	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
 	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
@@ -574,7 +730,7 @@ func (m *Error) Reset()         { *m = Error{} }
 func (m *Error) String() string { return proto.CompactTextString(m) }
 func (*Error) ProtoMessage()    {}
 func (*Error) Descriptor() ([]byte, []int) {
-	return fileDescriptor_819623c7fa76fc55, []int{9}
+	return fileDescriptor_819623c7fa76fc55, []int{11}
 }
 func (m *Error) XXX_Unmarshal(b []byte) error {
 	return m.Unmarshal(b)
@@ -618,6 +774,8 @@ func (m *Error) GetMsg() string {
 }
 
 func init() {
+	proto.RegisterEnum("mpp.CompressMethod", CompressMethod_name, CompressMethod_value)
+	proto.RegisterType((*ExchangeSenderMeta)(nil), "mpp.ExchangeSenderMeta")
 	proto.RegisterType((*TaskMeta)(nil), "mpp.TaskMeta")
 	proto.RegisterType((*IsAliveRequest)(nil), "mpp.IsAliveRequest")
 	proto.RegisterType((*IsAliveResponse)(nil), "mpp.IsAliveResponse")
@@ -626,6 +784,7 @@ func init() {
 	proto.RegisterType((*CancelTaskRequest)(nil), "mpp.CancelTaskRequest")
 	proto.RegisterType((*CancelTaskResponse)(nil), "mpp.CancelTaskResponse")
 	proto.RegisterType((*EstablishMPPConnectionRequest)(nil), "mpp.EstablishMPPConnectionRequest")
+	proto.RegisterType((*CompressMeta)(nil), "mpp.CompressMeta")
 	proto.RegisterType((*MPPDataPacket)(nil), "mpp.MPPDataPacket")
 	proto.RegisterType((*Error)(nil), "mpp.Error")
 }
@@ -633,45 +792,86 @@ func init() {
 func init() { proto.RegisterFile("mpp.proto", fileDescriptor_819623c7fa76fc55) }
 
 var fileDescriptor_819623c7fa76fc55 = []byte{
-	// 600 bytes of a gzipped FileDescriptorProto
-	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcf, 0x6e, 0xd3, 0x4e,
-	0x10, 0xfe, 0x39, 0xce, 0x9f, 0x66, 0xe2, 0xf4, 0xd7, 0x2e, 0x15, 0x4d, 0x2b, 0x1a, 0xa5, 0x3e,
-	0xe5, 0x82, 0x2b, 0x5a, 0x89, 0x23, 0x12, 0xb4, 0x3d, 0xe4, 0x50, 0x29, 0x5a, 0x55, 0x88, 0x9b,
-	0xb5, 0xb5, 0x87, 0x64, 0x15, 0x7b, 0xd7, 0xec, 0x6e, 0x2d, 0x21, 0xb8, 0x71, 0xe0, 0x15, 0x78,
-	0x24, 0x8e, 0x3c, 0x02, 0x2a, 0x2f, 0x82, 0x76, 0x6d, 0x87, 0x54, 0xa2, 0x02, 0x4e, 0x99, 0xef,
-	0x9b, 0xd9, 0x99, 0xf9, 0x3e, 0x4d, 0x0c, 0xfd, 0xbc, 0x28, 0xa2, 0x42, 0x49, 0x23, 0x89, 0x9f,
-	0x17, 0xc5, 0xe1, 0xde, 0x42, 0x2e, 0xa4, 0xc3, 0x27, 0x36, 0xaa, 0x52, 0x87, 0xbb, 0x89, 0xe5,
-	0x12, 0xd4, 0x5a, 0xaa, 0x9a, 0x0a, 0x72, 0x34, 0xac, 0xb8, 0xa9, 0x50, 0xf8, 0x01, 0xb6, 0xae,
-	0x99, 0x5e, 0x5d, 0xa1, 0x61, 0xe4, 0x00, 0xb6, 0xb4, 0x61, 0xca, 0xc4, 0x46, 0x8f, 0xbc, 0x89,
-	0x37, 0x6d, 0xd3, 0x9e, 0xc3, 0xd7, 0x9a, 0xec, 0x43, 0xcf, 0x30, 0xbd, 0x8a, 0x79, 0x3a, 0x6a,
-	0x4d, 0xbc, 0xa9, 0x4f, 0xbb, 0x16, 0xce, 0x52, 0x72, 0x0c, 0x41, 0xc1, 0x94, 0xe1, 0x86, 0x4b,
-	0x61, 0xb3, 0xbe, 0xcb, 0x0e, 0xd6, 0xdc, 0x2c, 0x25, 0x23, 0xe8, 0xb1, 0x34, 0x55, 0xa8, 0xf5,
-	0xa8, 0x3d, 0xf1, 0xa6, 0x7d, 0xda, 0xc0, 0x70, 0x07, 0xb6, 0x67, 0xfa, 0x65, 0xc6, 0x4b, 0xa4,
-	0xf8, 0xee, 0x16, 0xb5, 0x09, 0x4f, 0xe0, 0xff, 0x35, 0xa3, 0x0b, 0x29, 0x34, 0x92, 0x27, 0xd0,
-	0x67, 0x25, 0xe3, 0x19, 0xbb, 0xc9, 0xd0, 0xad, 0xb5, 0x45, 0x7f, 0x11, 0xe1, 0xe7, 0x16, 0x3c,
-	0xba, 0xe0, 0xba, 0x60, 0x26, 0x59, 0x5a, 0x21, 0x75, 0x23, 0x72, 0x0c, 0x6d, 0xab, 0xd3, 0x3d,
-	0x18, 0x9c, 0x0e, 0x23, 0xeb, 0x56, 0x23, 0x94, 0xba, 0x94, 0x5d, 0x1d, 0x45, 0x22, 0x53, 0x4c,
-	0xe3, 0x22, 0x63, 0xc2, 0x09, 0x0b, 0xe8, 0xa0, 0xe6, 0xe6, 0x19, 0x13, 0x76, 0x75, 0xc3, 0x73,
-	0x94, 0xb7, 0xa6, 0x16, 0xd6, 0x40, 0xf2, 0x0c, 0x7a, 0x0a, 0x17, 0x5c, 0x0a, 0x2b, 0xca, 0x9f,
-	0x0e, 0x4e, 0xf7, 0xa3, 0x4d, 0xab, 0xa9, 0xcb, 0xcd, 0xc4, 0x5b, 0x49, 0x9b, 0x3a, 0x72, 0x04,
-	0xa0, 0x93, 0x25, 0xe6, 0x2c, 0x2e, 0x51, 0x8d, 0x3a, 0xae, 0x5f, 0xbf, 0x62, 0x5e, 0xa3, 0x22,
-	0x2f, 0x60, 0x68, 0xac, 0xa4, 0xb8, 0xe9, 0xdb, 0x75, 0x7d, 0x0f, 0xee, 0xf5, 0xbd, 0xb6, 0x15,
-	0x55, 0x73, 0x4d, 0x03, 0xb3, 0x81, 0xc2, 0x1c, 0xf6, 0xee, 0x1b, 0x51, 0xfb, 0x37, 0x81, 0x0e,
-	0x2a, 0x25, 0x55, 0x6d, 0x05, 0x38, 0x2b, 0x2e, 0x2d, 0x43, 0xab, 0x04, 0x39, 0x83, 0xa1, 0x42,
-	0xa3, 0xde, 0xaf, 0x27, 0xb7, 0xdc, 0xe4, 0xed, 0xa8, 0xbe, 0x94, 0x6a, 0x02, 0x0d, 0x5c, 0x51,
-	0x33, 0xee, 0x0d, 0xec, 0x9e, 0x33, 0x91, 0x60, 0xf6, 0x8f, 0xae, 0xaf, 0xd7, 0x69, 0x3d, 0xb0,
-	0x4e, 0xf8, 0x1c, 0xc8, 0x66, 0xe7, 0xbf, 0x95, 0x11, 0x7e, 0xf2, 0xe0, 0xe8, 0x52, 0x5b, 0x4f,
-	0xb8, 0x5e, 0x5e, 0xcd, 0xe7, 0xe7, 0x52, 0x08, 0x4c, 0xec, 0x11, 0x36, 0xeb, 0x45, 0x30, 0xd0,
-	0x28, 0x52, 0x54, 0xf1, 0xc3, 0x5b, 0x42, 0x55, 0xe1, 0xfe, 0x10, 0xa7, 0xd6, 0x98, 0x04, 0x79,
-	0xd9, 0xbc, 0x68, 0xfd, 0xee, 0x45, 0xd0, 0xd4, 0x58, 0x14, 0x7e, 0x84, 0xe1, 0xd5, 0x7c, 0x7e,
-	0xc1, 0x0c, 0x9b, 0xb3, 0x64, 0x85, 0x86, 0x10, 0x68, 0xa7, 0xac, 0x9e, 0x16, 0x50, 0x17, 0xff,
-	0xd9, 0x04, 0xf2, 0x18, 0xba, 0xc9, 0xf2, 0x56, 0xac, 0xf4, 0xc8, 0x9f, 0xf8, 0xd3, 0x80, 0xd6,
-	0xc8, 0x1d, 0x91, 0x51, 0xc8, 0xf2, 0x98, 0xa7, 0xd5, 0xe9, 0xb5, 0x69, 0xbf, 0x62, 0x66, 0xa9,
-	0x0e, 0x9f, 0x42, 0xc7, 0xb5, 0xb1, 0x53, 0xed, 0x19, 0xbb, 0xa9, 0x1d, 0xea, 0x62, 0xb2, 0x03,
-	0x7e, 0xae, 0x17, 0x6e, 0x66, 0x9f, 0xda, 0xf0, 0x55, 0xf8, 0xf5, 0x6e, 0xec, 0x7d, 0xbb, 0x1b,
-	0x7b, 0xdf, 0xef, 0xc6, 0xde, 0x97, 0x1f, 0xe3, 0xff, 0x60, 0x47, 0xaa, 0x45, 0x64, 0xf8, 0xaa,
-	0x8c, 0x56, 0xa5, 0xfb, 0x42, 0xdc, 0x74, 0xdd, 0xcf, 0xd9, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff,
-	0xef, 0x8c, 0x66, 0x5e, 0x71, 0x04, 0x00, 0x00,
+	// 750 bytes of a gzipped FileDescriptorProto
+	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xdb, 0x38,
+	0x10, 0x8e, 0x2c, 0xff, 0x8e, 0x65, 0xaf, 0xc3, 0x04, 0x1b, 0x27, 0xd8, 0x78, 0x1d, 0x9d, 0x8c,
+	0x5d, 0xc4, 0x41, 0x9d, 0xa2, 0x97, 0x02, 0x05, 0xda, 0xc4, 0x07, 0x03, 0x75, 0x6a, 0x30, 0x46,
+	0x50, 0xe4, 0x22, 0x30, 0x12, 0x6b, 0x0b, 0xb6, 0x44, 0x96, 0x64, 0x8c, 0xf6, 0xdc, 0x97, 0xe8,
+	0xa1, 0x6f, 0xd0, 0x17, 0xe9, 0xb1, 0xe8, 0x13, 0x14, 0xe9, 0x8b, 0x14, 0xa4, 0x24, 0xc7, 0xf9,
+	0xe9, 0xdf, 0x49, 0x9a, 0x6f, 0x86, 0xc3, 0x6f, 0x3e, 0xce, 0x0c, 0x54, 0x22, 0xce, 0xbb, 0x5c,
+	0x30, 0xc5, 0x90, 0x1d, 0x71, 0xbe, 0xb3, 0x39, 0x61, 0x13, 0x66, 0xec, 0x03, 0xfd, 0x97, 0xb8,
+	0x76, 0xd6, 0x7d, 0x8d, 0xf9, 0x54, 0x4a, 0x26, 0x52, 0xc8, 0x89, 0xa8, 0x22, 0xfc, 0x22, 0xb1,
+	0xdc, 0x3e, 0xa0, 0xfe, 0x1b, 0x7f, 0x4a, 0xe2, 0x09, 0x3d, 0xa5, 0x71, 0x40, 0xc5, 0x90, 0x2a,
+	0x82, 0x0e, 0xa0, 0xec, 0xb3, 0x88, 0x0b, 0x2a, 0x65, 0xd3, 0x6a, 0x5b, 0x9d, 0x7a, 0x6f, 0xa3,
+	0xab, 0xef, 0x3b, 0x4a, 0xc1, 0x21, 0x55, 0x53, 0x16, 0xe0, 0x65, 0x90, 0xfb, 0xc1, 0x82, 0xf2,
+	0x98, 0xc8, 0x99, 0x39, 0xbd, 0x0d, 0x65, 0xa9, 0x88, 0x50, 0x9e, 0x4a, 0x4e, 0xe7, 0x71, 0xc9,
+	0xd8, 0x63, 0x89, 0xb6, 0xa0, 0xa4, 0x88, 0x9c, 0x79, 0x61, 0xd0, 0xcc, 0xb5, 0xad, 0x8e, 0x8d,
+	0x8b, 0xda, 0x1c, 0x04, 0x68, 0x0f, 0x1c, 0x4e, 0x84, 0x0a, 0x55, 0xc8, 0x62, 0xed, 0xb5, 0x8d,
+	0xb7, 0xba, 0xc4, 0x06, 0x01, 0x6a, 0x42, 0x89, 0x04, 0x81, 0xe1, 0x94, 0x6f, 0x5b, 0x9d, 0x0a,
+	0xce, 0x4c, 0xf4, 0x2f, 0x54, 0x23, 0xce, 0xbd, 0x05, 0x15, 0x32, 0x64, 0x71, 0xb3, 0x60, 0xce,
+	0x42, 0xc4, 0xf9, 0x59, 0x82, 0xb8, 0x0d, 0xa8, 0x0f, 0xe4, 0xd3, 0x79, 0xb8, 0xa0, 0x98, 0xbe,
+	0xbe, 0xa4, 0x52, 0xb9, 0x23, 0xf8, 0x6b, 0x89, 0x48, 0xce, 0x62, 0x49, 0xd1, 0x3f, 0x50, 0x21,
+	0x0b, 0x12, 0xce, 0xc9, 0xc5, 0x9c, 0x1a, 0xde, 0x65, 0x7c, 0x0d, 0xdc, 0xbe, 0x23, 0x77, 0xe7,
+	0x8e, 0x2f, 0x39, 0xd8, 0x38, 0x0e, 0x25, 0x27, 0xca, 0x9f, 0x6a, 0x29, 0xd2, 0x9b, 0xd0, 0x1e,
+	0xe4, 0xb5, 0xe2, 0x26, 0x63, 0xb5, 0x57, 0x33, 0x3a, 0x66, 0x52, 0x61, 0xe3, 0xd2, 0xc5, 0xd3,
+	0xd8, 0x67, 0x01, 0x0d, 0x3c, 0x3e, 0x27, 0x49, 0x72, 0x07, 0x57, 0x53, 0x6c, 0x34, 0x27, 0xb1,
+	0x2e, 0x5e, 0x85, 0x11, 0x65, 0x97, 0x2a, 0x95, 0x26, 0x33, 0xd1, 0x03, 0x28, 0x09, 0x3a, 0x09,
+	0x59, 0xac, 0x65, 0xb1, 0x3b, 0xd5, 0xde, 0x56, 0x77, 0xf5, 0xd1, 0xb1, 0xf1, 0x0d, 0xe2, 0x57,
+	0x0c, 0x67, 0x71, 0x68, 0x17, 0x40, 0xfa, 0x53, 0x1a, 0x11, 0x5d, 0x4e, 0x2a, 0x57, 0x25, 0x41,
+	0xce, 0xa8, 0x40, 0x4f, 0xa0, 0xa6, 0x74, 0xcd, 0x5e, 0x96, 0xb7, 0x68, 0xf2, 0x6e, 0xdf, 0xc8,
+	0x3b, 0xd6, 0x11, 0x49, 0x72, 0x89, 0x1d, 0xb5, 0x62, 0xa1, 0x01, 0x6c, 0xd2, 0xb4, 0xa7, 0x3c,
+	0x69, 0x9a, 0xca, 0x33, 0x0a, 0x94, 0x8c, 0x02, 0x5b, 0x46, 0x81, 0xbb, 0x4d, 0x87, 0x11, 0xbd,
+	0x83, 0xb9, 0x11, 0x6c, 0xde, 0xd4, 0x34, 0x7d, 0xab, 0x36, 0x14, 0xa8, 0x10, 0x4c, 0xa4, 0xaa,
+	0x42, 0x92, 0x53, 0x23, 0x38, 0x71, 0xa0, 0x43, 0xa8, 0x09, 0xaa, 0xc4, 0xdb, 0x65, 0x11, 0x39,
+	0x53, 0x44, 0xbd, 0x9b, 0xb6, 0x7f, 0x42, 0x16, 0x3b, 0x26, 0x28, 0x65, 0xee, 0xbe, 0x84, 0xf5,
+	0x23, 0x12, 0xfb, 0x74, 0xfe, 0x87, 0x0f, 0xb8, 0xa4, 0x93, 0xfb, 0x01, 0x1d, 0xf7, 0x11, 0xa0,
+	0xd5, 0xcc, 0xbf, 0x5b, 0x86, 0xfb, 0xce, 0x82, 0xdd, 0xbe, 0xd4, 0xf2, 0x86, 0x72, 0x3a, 0x1c,
+	0x8d, 0x8e, 0x58, 0x1c, 0x53, 0x5f, 0x4f, 0x44, 0x46, 0xaf, 0x0b, 0xd5, 0x55, 0x91, 0xef, 0x65,
+	0x09, 0xf2, 0x7a, 0xb6, 0x7b, 0x5a, 0x18, 0x9f, 0x86, 0x8b, 0xec, 0x44, 0xee, 0xbe, 0x13, 0x4e,
+	0x16, 0x63, 0x9e, 0xe1, 0x31, 0x38, 0x2b, 0xa3, 0x4f, 0xd0, 0xff, 0x50, 0x8c, 0xcc, 0x0a, 0xf8,
+	0xd9, 0x76, 0x48, 0x43, 0xdc, 0x8f, 0x16, 0xd4, 0x86, 0xa3, 0xd1, 0x31, 0x51, 0x64, 0x44, 0xfc,
+	0x19, 0x55, 0x08, 0x41, 0x3e, 0x20, 0x29, 0x57, 0x07, 0x9b, 0xff, 0x5f, 0x4b, 0x88, 0xfe, 0x86,
+	0xa2, 0x3f, 0xbd, 0x8c, 0x67, 0xb2, 0x69, 0xb7, 0xed, 0x8e, 0x83, 0x53, 0xcb, 0x74, 0xb3, 0x12,
+	0x94, 0x44, 0x5e, 0x18, 0x24, 0x33, 0x90, 0xc7, 0x95, 0x04, 0x19, 0x04, 0x12, 0xed, 0xaf, 0xec,
+	0xb2, 0x82, 0xc9, 0xbd, 0x7e, 0x9b, 0x2d, 0x59, 0xd9, 0x64, 0xfb, 0x50, 0x30, 0xb7, 0x6a, 0x92,
+	0x7a, 0xfc, 0x0c, 0xc9, 0x02, 0x36, 0xff, 0xa8, 0x01, 0x76, 0x24, 0x27, 0x86, 0x62, 0x05, 0xeb,
+	0xdf, 0xff, 0xf6, 0xa1, 0x7e, 0xb3, 0x6c, 0x54, 0x86, 0xfc, 0xc9, 0x8b, 0x93, 0x7e, 0x63, 0x0d,
+	0x95, 0xc0, 0x7e, 0x7e, 0xfe, 0xb0, 0x61, 0x69, 0xe8, 0xfc, 0x74, 0x7c, 0xdc, 0xc8, 0x3d, 0x73,
+	0x3f, 0x5d, 0xb5, 0xac, 0xcf, 0x57, 0x2d, 0xeb, 0xeb, 0x55, 0xcb, 0x7a, 0xff, 0xad, 0xb5, 0x06,
+	0x0d, 0x26, 0x26, 0x5d, 0x15, 0xce, 0x16, 0xdd, 0xd9, 0xc2, 0xac, 0xe4, 0x8b, 0xa2, 0xf9, 0x1c,
+	0x7e, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x91, 0xaa, 0x0c, 0xe0, 0xe2, 0x05, 0x00, 0x00,
+}
+
+func (m *ExchangeSenderMeta) Marshal() (dAtA []byte, err error) {
+	size := m.Size()
+	dAtA = make([]byte, size)
+	n, err := m.MarshalToSizedBuffer(dAtA[:size])
+	if err != nil {
+		return nil, err
+	}
+	return dAtA[:n], nil
+}
+
+func (m *ExchangeSenderMeta) MarshalTo(dAtA []byte) (int, error) {
+	size := m.Size()
+	return m.MarshalToSizedBuffer(dAtA[:size])
+}
+
+func (m *ExchangeSenderMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
+	i := len(dAtA)
+	_ = i
+	var l int
+	_ = l
+	if m.XXX_unrecognized != nil {
+		i -= len(m.XXX_unrecognized)
+		copy(dAtA[i:], m.XXX_unrecognized)
+	}
+	if m.Compress != 0 {
+		i = encodeVarintMpp(dAtA, i, uint64(m.Compress))
+		i--
+		dAtA[i] = 0x8
+	}
+	return len(dAtA) - i, nil
 }
 
 func (m *TaskMeta) Marshal() (dAtA []byte, err error) {
@@ -698,6 +898,11 @@ func (m *TaskMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
 		i -= len(m.XXX_unrecognized)
 		copy(dAtA[i:], m.XXX_unrecognized)
 	}
+	if m.MppVersion != 0 {
+		i = encodeVarintMpp(dAtA, i, uint64(m.MppVersion))
+		i--
+		dAtA[i] = 0x28
+	}
 	if len(m.Address) > 0 {
 		i -= len(m.Address)
 		copy(dAtA[i:], m.Address)
@@ -774,6 +979,11 @@ func (m *IsAliveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
 		i -= len(m.XXX_unrecognized)
 		copy(dAtA[i:], m.XXX_unrecognized)
 	}
+	if m.MppVersion != 0 {
+		i = encodeVarintMpp(dAtA, i, uint64(m.MppVersion))
+		i--
+		dAtA[i] = 0x10
+	}
 	if m.Available {
 		i--
 		if m.Available {
@@ -811,6 +1021,18 @@ func (m *DispatchTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
 		i -= len(m.XXX_unrecognized)
 		copy(dAtA[i:], m.XXX_unrecognized)
 	}
+	if m.ExchangeSenderMeta != nil {
+		{
+			size, err := m.ExchangeSenderMeta.MarshalToSizedBuffer(dAtA[:i])
+			if err != nil {
+				return 0, err
+			}
+			i -= size
+			i = encodeVarintMpp(dAtA, i, uint64(size))
+		}
+		i--
+		dAtA[i] = 0x3a
+	}
 	if len(m.TableRegions) > 0 {
 		for iNdEx := len(m.TableRegions) - 1; iNdEx >= 0; iNdEx-- {
 			{
@@ -1065,6 +1287,38 @@ func (m *EstablishMPPConnectionRequest) MarshalToSizedBuffer(dAtA []byte) (int,
 	return len(dAtA) - i, nil
 }
 
+func (m *CompressMeta) Marshal() (dAtA []byte, err error) {
+	size := m.Size()
+	dAtA = make([]byte, size)
+	n, err := m.MarshalToSizedBuffer(dAtA[:size])
+	if err != nil {
+		return nil, err
+	}
+	return dAtA[:n], nil
+}
+
+func (m *CompressMeta) MarshalTo(dAtA []byte) (int, error) {
+	size := m.Size()
+	return m.MarshalToSizedBuffer(dAtA[:size])
+}
+
+func (m *CompressMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
+	i := len(dAtA)
+	_ = i
+	var l int
+	_ = l
+	if m.XXX_unrecognized != nil {
+		i -= len(m.XXX_unrecognized)
+		copy(dAtA[i:], m.XXX_unrecognized)
+	}
+	if m.Method != 0 {
+		i = encodeVarintMpp(dAtA, i, uint64(m.Method))
+		i--
+		dAtA[i] = 0x8
+	}
+	return len(dAtA) - i, nil
+}
+
 func (m *MPPDataPacket) Marshal() (dAtA []byte, err error) {
 	size := m.Size()
 	dAtA = make([]byte, size)
@@ -1089,21 +1343,33 @@ func (m *MPPDataPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
 		i -= len(m.XXX_unrecognized)
 		copy(dAtA[i:], m.XXX_unrecognized)
 	}
+	if m.Compress != nil {
+		{
+			size, err := m.Compress.MarshalToSizedBuffer(dAtA[:i])
+			if err != nil {
+				return 0, err
+			}
+			i -= size
+			i = encodeVarintMpp(dAtA, i, uint64(size))
+		}
+		i--
+		dAtA[i] = 0x2a
+	}
 	if len(m.StreamIds) > 0 {
-		dAtA9 := make([]byte, len(m.StreamIds)*10)
-		var j8 int
+		dAtA11 := make([]byte, len(m.StreamIds)*10)
+		var j10 int
 		for _, num := range m.StreamIds {
 			for num >= 1<<7 {
-				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
+				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
 				num >>= 7
-				j8++
+				j10++
 			}
-			dAtA9[j8] = uint8(num)
-			j8++
+			dAtA11[j10] = uint8(num)
+			j10++
 		}
-		i -= j8
-		copy(dAtA[i:], dAtA9[:j8])
-		i = encodeVarintMpp(dAtA, i, uint64(j8))
+		i -= j10
+		copy(dAtA[i:], dAtA11[:j10])
+		i = encodeVarintMpp(dAtA, i, uint64(j10))
 		i--
 		dAtA[i] = 0x22
 	}
@@ -1188,6 +1454,21 @@ func encodeVarintMpp(dAtA []byte, offset int, v uint64) int {
 	dAtA[offset] = uint8(v)
 	return base
 }
+func (m *ExchangeSenderMeta) Size() (n int) {
+	if m == nil {
+		return 0
+	}
+	var l int
+	_ = l
+	if m.Compress != 0 {
+		n += 1 + sovMpp(uint64(m.Compress))
+	}
+	if m.XXX_unrecognized != nil {
+		n += len(m.XXX_unrecognized)
+	}
+	return n
+}
+
 func (m *TaskMeta) Size() (n int) {
 	if m == nil {
 		return 0
@@ -1207,6 +1488,9 @@ func (m *TaskMeta) Size() (n int) {
 	if l > 0 {
 		n += 1 + l + sovMpp(uint64(l))
 	}
+	if m.MppVersion != 0 {
+		n += 1 + sovMpp(uint64(m.MppVersion))
+	}
 	if m.XXX_unrecognized != nil {
 		n += len(m.XXX_unrecognized)
 	}
@@ -1234,6 +1518,9 @@ func (m *IsAliveResponse) Size() (n int) {
 	if m.Available {
 		n += 2
 	}
+	if m.MppVersion != 0 {
+		n += 1 + sovMpp(uint64(m.MppVersion))
+	}
 	if m.XXX_unrecognized != nil {
 		n += len(m.XXX_unrecognized)
 	}
@@ -1272,6 +1559,10 @@ func (m *DispatchTaskRequest) Size() (n int) {
 			n += 1 + l + sovMpp(uint64(l))
 		}
 	}
+	if m.ExchangeSenderMeta != nil {
+		l = m.ExchangeSenderMeta.Size()
+		n += 1 + l + sovMpp(uint64(l))
+	}
 	if m.XXX_unrecognized != nil {
 		n += len(m.XXX_unrecognized)
 	}
@@ -1356,6 +1647,21 @@ func (m *EstablishMPPConnectionRequest) Size() (n int) {
 	return n
 }
 
+func (m *CompressMeta) Size() (n int) {
+	if m == nil {
+		return 0
+	}
+	var l int
+	_ = l
+	if m.Method != 0 {
+		n += 1 + sovMpp(uint64(m.Method))
+	}
+	if m.XXX_unrecognized != nil {
+		n += len(m.XXX_unrecognized)
+	}
+	return n
+}
+
 func (m *MPPDataPacket) Size() (n int) {
 	if m == nil {
 		return 0
@@ -1383,6 +1689,10 @@ func (m *MPPDataPacket) Size() (n int) {
 		}
 		n += 1 + sovMpp(uint64(l)) + l
 	}
+	if m.Compress != nil {
+		l = m.Compress.Size()
+		n += 1 + l + sovMpp(uint64(l))
+	}
 	if m.XXX_unrecognized != nil {
 		n += len(m.XXX_unrecognized)
 	}
@@ -1414,6 +1724,76 @@ func sovMpp(x uint64) (n int) {
 func sozMpp(x uint64) (n int) {
 	return sovMpp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
 }
+func (m *ExchangeSenderMeta) Unmarshal(dAtA []byte) error {
+	l := len(dAtA)
+	iNdEx := 0
+	for iNdEx < l {
+		preIndex := iNdEx
+		var wire uint64
+		for shift := uint(0); ; shift += 7 {
+			if shift >= 64 {
+				return ErrIntOverflowMpp
+			}
+			if iNdEx >= l {
+				return io.ErrUnexpectedEOF
+			}
+			b := dAtA[iNdEx]
+			iNdEx++
+			wire |= uint64(b&0x7F) << shift
+			if b < 0x80 {
+				break
+			}
+		}
+		fieldNum := int32(wire >> 3)
+		wireType := int(wire & 0x7)
+		if wireType == 4 {
+			return fmt.Errorf("proto: ExchangeSenderMeta: wiretype end group for non-group")
+		}
+		if fieldNum <= 0 {
+			return fmt.Errorf("proto: ExchangeSenderMeta: illegal tag %d (wire type %d)", fieldNum, wire)
+		}
+		switch fieldNum {
+		case 1:
+			if wireType != 0 {
+				return fmt.Errorf("proto: wrong wireType = %d for field Compress", wireType)
+			}
+			m.Compress = 0
+			for shift := uint(0); ; shift += 7 {
+				if shift >= 64 {
+					return ErrIntOverflowMpp
+				}
+				if iNdEx >= l {
+					return io.ErrUnexpectedEOF
+				}
+				b := dAtA[iNdEx]
+				iNdEx++
+				m.Compress |= CompressMethod(b&0x7F) << shift
+				if b < 0x80 {
+					break
+				}
+			}
+		default:
+			iNdEx = preIndex
+			skippy, err := skipMpp(dAtA[iNdEx:])
+			if err != nil {
+				return err
+			}
+			if (skippy < 0) || (iNdEx+skippy) < 0 {
+				return ErrInvalidLengthMpp
+			}
+			if (iNdEx + skippy) > l {
+				return io.ErrUnexpectedEOF
+			}
+			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
+			iNdEx += skippy
+		}
+	}
+
+	if iNdEx > l {
+		return io.ErrUnexpectedEOF
+	}
+	return nil
+}
 func (m *TaskMeta) Unmarshal(dAtA []byte) error {
 	l := len(dAtA)
 	iNdEx := 0
@@ -1532,6 +1912,25 @@ func (m *TaskMeta) Unmarshal(dAtA []byte) error {
 			}
 			m.Address = string(dAtA[iNdEx:postIndex])
 			iNdEx = postIndex
+		case 5:
+			if wireType != 0 {
+				return fmt.Errorf("proto: wrong wireType = %d for field MppVersion", wireType)
+			}
+			m.MppVersion = 0
+			for shift := uint(0); ; shift += 7 {
+				if shift >= 64 {
+					return ErrIntOverflowMpp
+				}
+				if iNdEx >= l {
+					return io.ErrUnexpectedEOF
+				}
+				b := dAtA[iNdEx]
+				iNdEx++
+				m.MppVersion |= int64(b&0x7F) << shift
+				if b < 0x80 {
+					break
+				}
+			}
 		default:
 			iNdEx = preIndex
 			skippy, err := skipMpp(dAtA[iNdEx:])
@@ -1654,6 +2053,25 @@ func (m *IsAliveResponse) Unmarshal(dAtA []byte) error {
 				}
 			}
 			m.Available = bool(v != 0)
+		case 2:
+			if wireType != 0 {
+				return fmt.Errorf("proto: wrong wireType = %d for field MppVersion", wireType)
+			}
+			m.MppVersion = 0
+			for shift := uint(0); ; shift += 7 {
+				if shift >= 64 {
+					return ErrIntOverflowMpp
+				}
+				if iNdEx >= l {
+					return io.ErrUnexpectedEOF
+				}
+				b := dAtA[iNdEx]
+				iNdEx++
+				m.MppVersion |= int64(b&0x7F) << shift
+				if b < 0x80 {
+					break
+				}
+			}
 		default:
 			iNdEx = preIndex
 			skippy, err := skipMpp(dAtA[iNdEx:])
@@ -1881,6 +2299,42 @@ func (m *DispatchTaskRequest) Unmarshal(dAtA []byte) error {
 				return err
 			}
 			iNdEx = postIndex
+		case 7:
+			if wireType != 2 {
+				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeSenderMeta", wireType)
+			}
+			var msglen int
+			for shift := uint(0); ; shift += 7 {
+				if shift >= 64 {
+					return ErrIntOverflowMpp
+				}
+				if iNdEx >= l {
+					return io.ErrUnexpectedEOF
+				}
+				b := dAtA[iNdEx]
+				iNdEx++
+				msglen |= int(b&0x7F) << shift
+				if b < 0x80 {
+					break
+				}
+			}
+			if msglen < 0 {
+				return ErrInvalidLengthMpp
+			}
+			postIndex := iNdEx + msglen
+			if postIndex < 0 {
+				return ErrInvalidLengthMpp
+			}
+			if postIndex > l {
+				return io.ErrUnexpectedEOF
+			}
+			if m.ExchangeSenderMeta == nil {
+				m.ExchangeSenderMeta = &ExchangeSenderMeta{}
+			}
+			if err := m.ExchangeSenderMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
+				return err
+			}
+			iNdEx = postIndex
 		default:
 			iNdEx = preIndex
 			skippy, err := skipMpp(dAtA[iNdEx:])
@@ -2357,6 +2811,76 @@ func (m *EstablishMPPConnectionRequest) Unmarshal(dAtA []byte) error {
 	}
 	return nil
 }
+func (m *CompressMeta) Unmarshal(dAtA []byte) error {
+	l := len(dAtA)
+	iNdEx := 0
+	for iNdEx < l {
+		preIndex := iNdEx
+		var wire uint64
+		for shift := uint(0); ; shift += 7 {
+			if shift >= 64 {
+				return ErrIntOverflowMpp
+			}
+			if iNdEx >= l {
+				return io.ErrUnexpectedEOF
+			}
+			b := dAtA[iNdEx]
+			iNdEx++
+			wire |= uint64(b&0x7F) << shift
+			if b < 0x80 {
+				break
+			}
+		}
+		fieldNum := int32(wire >> 3)
+		wireType := int(wire & 0x7)
+		if wireType == 4 {
+			return fmt.Errorf("proto: CompressMeta: wiretype end group for non-group")
+		}
+		if fieldNum <= 0 {
+			return fmt.Errorf("proto: CompressMeta: illegal tag %d (wire type %d)", fieldNum, wire)
+		}
+		switch fieldNum {
+		case 1:
+			if wireType != 0 {
+				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
+			}
+			m.Method = 0
+			for shift := uint(0); ; shift += 7 {
+				if shift >= 64 {
+					return ErrIntOverflowMpp
+				}
+				if iNdEx >= l {
+					return io.ErrUnexpectedEOF
+				}
+				b := dAtA[iNdEx]
+				iNdEx++
+				m.Method |= CompressMethod(b&0x7F) << shift
+				if b < 0x80 {
+					break
+				}
+			}
+		default:
+			iNdEx = preIndex
+			skippy, err := skipMpp(dAtA[iNdEx:])
+			if err != nil {
+				return err
+			}
+			if (skippy < 0) || (iNdEx+skippy) < 0 {
+				return ErrInvalidLengthMpp
+			}
+			if (iNdEx + skippy) > l {
+				return io.ErrUnexpectedEOF
+			}
+			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
+			iNdEx += skippy
+		}
+	}
+
+	if iNdEx > l {
+		return io.ErrUnexpectedEOF
+	}
+	return nil
+}
 func (m *MPPDataPacket) Unmarshal(dAtA []byte) error {
 	l := len(dAtA)
 	iNdEx := 0
@@ -2564,6 +3088,42 @@ func (m *MPPDataPacket) Unmarshal(dAtA []byte) error {
 			} else {
 				return fmt.Errorf("proto: wrong wireType = %d for field StreamIds", wireType)
 			}
+		case 5:
+			if wireType != 2 {
+				return fmt.Errorf("proto: wrong wireType = %d for field Compress", wireType)
+			}
+			var msglen int
+			for shift := uint(0); ; shift += 7 {
+				if shift >= 64 {
+					return ErrIntOverflowMpp
+				}
+				if iNdEx >= l {
+					return io.ErrUnexpectedEOF
+				}
+				b := dAtA[iNdEx]
+				iNdEx++
+				msglen |= int(b&0x7F) << shift
+				if b < 0x80 {
+					break
+				}
+			}
+			if msglen < 0 {
+				return ErrInvalidLengthMpp
+			}
+			postIndex := iNdEx + msglen
+			if postIndex < 0 {
+				return ErrInvalidLengthMpp
+			}
+			if postIndex > l {
+				return io.ErrUnexpectedEOF
+			}
+			if m.Compress == nil {
+				m.Compress = &CompressMeta{}
+			}
+			if err := m.Compress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
+				return err
+			}
+			iNdEx = postIndex
 		default:
 			iNdEx = preIndex
 			skippy, err := skipMpp(dAtA[iNdEx:])
diff --git a/proto/mpp.proto b/proto/mpp.proto
index f8af03b..8dd93bf 100644
--- a/proto/mpp.proto
+++ b/proto/mpp.proto
@@ -11,12 +11,24 @@ option (gogoproto.unmarshaler_all) = true;
 
 option java_package = "org.tikv.kvproto";
 
+// Data compression method
+enum CompressMethod {
+  NONE = 0;
+  LZ4 = 1;
+  ZSTD = 2;
+}
+
+message ExchangeSenderMeta {
+	CompressMethod compress = 1;
+}
+
 // TaskMeta contains meta of a mpp plan, including query's ts and task address.
 message TaskMeta {
 	uint64 start_ts = 1; // start ts of a query
 	int64 task_id = 2; // if task id is -1 , it indicates a tidb task.
 	int64 partition_id = 3; // Only used for hash partition
 	string address = 4; // target address of this task.
+	int64 mpp_version = 5; // mpp version
 }
 
 message IsAliveRequest {
@@ -24,6 +36,7 @@ message IsAliveRequest {
 
 message IsAliveResponse {
     bool available = 1;
+    int64 mpp_version = 2;
 }
 
 // Dipsatch the task request to different tiflash servers.
@@ -36,6 +49,8 @@ message DispatchTaskRequest {
 	int64 schema_ver = 5;
 	// Used for partition table scan
 	repeated coprocessor.TableRegions table_regions = 6;
+	// Used for exchange sender
+    ExchangeSenderMeta exchange_sender_meta = 7;
 }
 
 // Get response of DispatchTaskRequest.
@@ -60,6 +75,10 @@ message EstablishMPPConnectionRequest {
 	TaskMeta receiver_meta = 2; // node closer to the tidb mpp gather.
 }
 
+message CompressMeta {
+	CompressMethod method = 1;
+}
+
 // when TiFlash sends data to TiDB, Data packets wrap tipb.SelectResponse, i.e., serialize tipb.SelectResponse into data;
 // when TiFlash sends data to TiFlash, data blocks are serialized into chunks, and the execution_summaries in tipb.SelectResponse are serialized into data only for the last packet.
 message MPPDataPacket {
@@ -67,6 +86,7 @@ message MPPDataPacket {
 	Error error = 2;
 	repeated bytes chunks = 3;
 	repeated uint64 stream_ids = 4;
+	CompressMeta compress = 5;
 }
 
 message Error {
