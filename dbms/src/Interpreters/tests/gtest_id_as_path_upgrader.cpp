#include <Debug/MockTiDB.h>
#include <Interpreters/IDAsPathUpgrader.h>
#include <Interpreters/loadMetadata.h>
#include <Poco/Environment.h>
#include <Storages/registerStorages.h>
#include <test_utils/TiflashTestBasic.h>

namespace DB::tests
{

TEST(IDAsPathUpgrader_test, ONCALL_1651)
try
{
    TiFlashTestEnv::setupLogger();
    try
    {
        registerStorages();
    }
    catch (DB::Exception &)
    {
        // Maybe another test has already registed, ignore exception here.
    }

    if (Poco::Environment::get("ALSO_RUN_WITH_TEST_DATA", "0") != "1")
        return;

    // prepare a "test" database for upgrader
    MockTiDB::instance().newDataBase("test");

    // Generated by running these SQL on cluster version v3.1.0
    // > create table test.aaa(pk int);
    // > rename table test.aaa TO test.abc;
    // > CREATE TABLE test.employees(id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    //     fname VARCHAR(25) NOT NULL,
    //     lname VARCHAR(25) NOT NULL,
    //     store_id INT NOT NULL,
    //     department_id INT NOT NULL)
    //     PARTITION BY RANGE(id)(PARTITION p0 VALUES LESS THAN(5),
    //         PARTITION p1 VALUES LESS THAN(10),
    //         PARTITION p2 VALUES LESS THAN(15),
    //         PARTITION p3 VALUES LESS THAN MAXVALUE);
    // > RENAME TABLE test.employees TO test.emp;
    // > RENAME TABLE test.emp TO test.emp_bak;
    const auto test_path = TiFlashTestEnv::findTestDataPath("oncall-1651");
    auto ctx = TiFlashTestEnv::getContext(DB::Settings(), test_path);

    IDAsPathUpgrader upgrader(ctx, false, {});
    ASSERT_TRUE(upgrader.needUpgrade());
    upgrader.doUpgrade();

    {
        // After upgrade, next time we don't need it.
        IDAsPathUpgrader checker_after_upgrade(ctx, false, {});
        ASSERT_FALSE(checker_after_upgrade.needUpgrade());
    }

    // load metadata should not throw any exception
    loadMetadata(ctx);
}
CATCH

} // namespace DB::tests
