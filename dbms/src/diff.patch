diff --git a/dbms/src/Common/TiFlashMetrics.h b/dbms/src/Common/TiFlashMetrics.h
index f5a174c7b..dd7bc5628 100644
--- a/dbms/src/Common/TiFlashMetrics.h
+++ b/dbms/src/Common/TiFlashMetrics.h
@@ -47,7 +47,19 @@ namespace DB
         F(type_drop_column, Counter, {"type", "drop_column"}), F(type_alter_column_tp, Counter, {"type", "alter_column_type"}),     \
         F(type_rename_column, Counter, {"type", "rename_column"}))                                                                  \
     M(tiflash_schema_apply_duration_seconds, "Bucketed histogram of ddl apply duration", Histogram, 1,                              \
-        F(type_ddl_apply_duration, Histogram, {{"req", "ddl_apply_duration"}}, ExpBuckets{0.0005, 2, 20}))
+        F(type_ddl_apply_duration, Histogram, {{"type", "ddl_apply_duration"}}, ExpBuckets{0.0005, 2, 20})) \
+    M(tiflash_tmt_merge_count, "Total count of TMT Engine Merge", Counter, 0)                                                 \
+    M(tiflash_tmt_merge_duration_seconds, "Bucketed histogram of tmt merge duration", Histogram, 1, \
+            F(type_tmt_merge_duration, Histogram, {{"type", "tmt_merge_duration"}}, ExpBuckets{0.0005, 2, 20}))                                                 \
+    M(tiflash_read_index_count, "Total number of read index request", Counter, 0)                                                 \
+    M(tiflash_read_index_duration_seconds, "Bucketed histogram of read_index duration", Histogram, 1, \
+            F(type_read_index_duration, Histogram, {{"type", "tmt_read_index_duration"}}, ExpBuckets{0.0005, 2, 20}))                                                 \
+    M(tiflash_wait_index_duration_seconds, "Bucketed histogram of wait_index duration", Histogram, 1, \
+            F(type_wait_index_duration, Histogram, {{"type", "tmt_wait_index_duration"}}, ExpBuckets{0.0005, 2, 20}))                                                 \
+    M(tiflash_tmt_write_parts_count, "Total count of TMT Engine write parts", Counter, 0)                                                 \
+    M(tiflash_tmt_write_parts_duration_seconds, "Bucketed histogram of tmt write parts duration", Histogram, 1, \
+            F(type_tmt_write_duration, Histogram, {{"type", "tmt_write_parts_duration"}}, ExpBuckets{0.0005, 2, 20}))                                                 \
+    M(tiflash_tmt_read_parts_number, "Total number of TMT Engine read parts", Gauge, 0)
 
 template <typename T>
 struct MetricFamilyTrait
diff --git a/dbms/src/Storages/MergeTree/MergeTreeDataMerger.cpp b/dbms/src/Storages/MergeTree/MergeTreeDataMerger.cpp
index 713ba3890..deafb3a28 100644
--- a/dbms/src/Storages/MergeTree/MergeTreeDataMerger.cpp
+++ b/dbms/src/Storages/MergeTree/MergeTreeDataMerger.cpp
@@ -27,6 +27,7 @@
 #include <DataTypes/DataTypeArray.h>
 #include <Storages/MergeTree/BackgroundProcessingPool.h>
 #include <Common/SimpleIncrement.h>
+#include <Common/TiFlashMetrics.h>
 #include <Common/interpolate.h>
 #include <Common/typeid_cast.h>
 #include <Storages/MergeTree/TMTDataPartProperty.h>
@@ -34,6 +35,7 @@
 #include <Storages/Transaction/RegionTable.h>
 #include <Storages/Transaction/CHTableHandle.h>
 #include <Storages/Transaction/TiDB.h>
+#include <ext/scope_guard.h>
 
 #include <Poco/File.h>
 
@@ -672,6 +674,8 @@ MergeTreeData::MutableDataPartPtr MergeTreeDataMerger::mergePartsToTemporaryPart
                 throw Exception("TMTContext is not initialized, throw exception", ErrorCodes::LOGICAL_ERROR);
             }
 
+            GET_METRIC(data.context.getTiFlashMetrics(), tiflash_tmt_merge_count).Increment();
+
             const bool pk_is_uint64 = getTMTPKType(*data.primary_key_data_types[0]) == TMTPKType::UINT64;
 
             const auto handle_col_name = data.getPrimarySortDescription()[0].column_name;
@@ -734,6 +738,11 @@ MergeTreeData::MutableDataPartPtr MergeTreeDataMerger::mergePartsToTemporaryPart
             merge_entry->total_size_bytes_compressed,
             static_cast<double> (merge_entry->total_size_bytes_compressed) / data.getTotalActiveSizeInBytes());
 
+    Stopwatch watch;
+    SCOPE_EXIT ({
+        GET_METRIC(data.context.getTiFlashMetrics(), tiflash_tmt_merge_duration_seconds).Observe(watch.elapsedSeconds());
+    });
+
     MergedBlockOutputStream to{
         data, new_part_tmp_path, merging_columns, false, compression_settings, merged_column_to_size, aio_threshold};
 
diff --git a/dbms/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp b/dbms/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp
index d52b5248d..4b1b4a525 100644
--- a/dbms/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp
+++ b/dbms/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp
@@ -20,6 +20,7 @@ struct numeric_limits<__uint128_t>
 #endif
 
 #include <Common/FieldVisitors.h>
+#include <Common/TiFlashMetrics.h>
 #include <Common/getNumberOfPhysicalCPUCores.h>
 #include <DataStreams/AddingConstColumnBlockInputStream.h>
 #include <DataStreams/AggregatingSortedBlockInputStream.h>
@@ -348,11 +349,20 @@ BlockInputStreams MergeTreeDataSelectExecutor::read(const Names & column_names_t
                                 + std::to_string(region->getMappedTableID()) + ", got " + std::to_string(data.table_info->id),
                             ErrorCodes::LOGICAL_ERROR);
 
+                    GET_METRIC(const_cast<Context &>(context).getTiFlashMetrics(), tiflash_read_index_count).Increment();
+                    Stopwatch read_index_watch;
+
                     /// Blocking learner read. Note that learner read must be performed ahead of data read,
                     /// otherwise the desired index will be blocked by the lock of data read.
                     auto [read_index, region_removed] = region->learnerRead();
+                    GET_METRIC(const_cast<Context &>(context).getTiFlashMetrics(), tiflash_read_index_duration_seconds).Observe(read_index_watch.elapsedSeconds());
+
                     if(!region_removed)
+                    {
+                        Stopwatch wait_index_watch;
                         region->waitIndex(read_index);
+                        GET_METRIC(const_cast<Context &>(context).getTiFlashMetrics(), tiflash_wait_index_duration_seconds).Observe(wait_index_watch.elapsedSeconds());
+                    }
                     else
                     {
                         // client-c detect region removed. Set region_status and continue.
