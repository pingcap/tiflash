// Copyright 2022 PingCAP, Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <TestUtils/TiFlashTestBasic.h>

#include <Storages/Transaction/JsonBinary.cpp>


namespace DB
{
namespace tests
{
class TestJsonBinary : public ::testing::Test
{
};

TEST_F(TestJsonBinary, TestUnquoteLiteral)
try
{
    char json_literals[3] = {
        0x0, /// null
        0x1, /// true
        0x2  /// false
    };
    std::vector<String> expected = {
        "null",
        "true",
        "false"
    };
    for (size_t i = 0; i < 3; ++i)
    {
        JsonBinary json_binary(JsonBinary::TYPE_CODE_LITERAL, StringRef(json_literals + i, 1));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == expected[i]);
    }
}
CATCH

TEST_F(TestJsonBinary, TestUnquoteInteger)
try
{
    UInt8 json_integers[3][8] = {
        {0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
        {0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
    };
    std::vector<String> expected = {
        "-3",
        "3",
        "18446744073709551615"
    };
    {
        JsonBinary json_binary(JsonBinary::TYPE_CODE_INT64, StringRef(json_integers[0], 8));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == expected[0]);
    }
    {
        JsonBinary json_binary(JsonBinary::TYPE_CODE_INT64, StringRef(json_integers[1], 8));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == expected[1]);
    }
    {
        JsonBinary json_binary(JsonBinary::TYPE_CODE_UINT64, StringRef(json_integers[2], 8));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == expected[2]);
    }
}
CATCH

TEST_F(TestJsonBinary, TestUnquoteFloat64)
try
{
    UInt8 json_floats[16][8] = {
        {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x40},
        {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
        {0x15, 0x1e, 0x9f, 0x79, 0x96, 0x1b, 0x4b, 0x44},
        {0x63, 0x4a, 0x45, 0x1e, 0xa6, 0x14, 0x4b, 0x44},
        {0x46, 0x44, 0xb9, 0xe6, 0x8f, 0xc4, 0xb0, 0x3e},
        {0x76, 0x83, 0xd, 0xf4, 0xf5, 0x21, 0xb4, 0x3e},
        {0xd9, 0x44, 0xb9, 0xbf, 0xb9, 0x89, 0x1a, 0x3f},
        {0x0, 0x80, 0xe0, 0x37, 0x79, 0xc3, 0x41, 0x43},
        {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0xc0},
        {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80},
        {0x15, 0x1e, 0x9f, 0x79, 0x96, 0x1b, 0x4b, 0xc4},
        {0x63, 0x4a, 0x45, 0x1e, 0xa6, 0x14, 0x4b, 0xc4},
        {0x46, 0x44, 0xb9, 0xe6, 0x8f, 0xc4, 0xb0, 0xbe},
        {0x76, 0x83, 0xd, 0xf4, 0xf5, 0x21, 0xb4, 0xbe},
        {0xd9, 0x44, 0xb9, 0xbf, 0xb9, 0x89, 0x1a, 0xbf},
        {0x0, 0x80, 0xe0, 0x37, 0x79, 0xc3, 0x41, 0xc3},
    };
    std::vector<String> expected = {
        "3",
        "0",
        "1.0001e+21",
        "999100000000000000000",
        "9.9944e-7",
        "1.2e-6",
        "0.0001012344",
        "10000000000000000",
        "-3",
        "-0",
        "-1.0001e+21",
        "-999100000000000000000",
        "-9.9944e-7",
        "-1.2e-6",
        "-0.0001012344",
        "-10000000000000000",
    };
    for (size_t i = 0; i < expected.size(); ++i)
    {
        JsonBinary json_binary(JsonBinary::TYPE_CODE_FLOAT64, StringRef(json_floats[i], 8));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == expected[i]);
    }
}
CATCH

TEST_F(TestJsonBinary, TestUnquoteObject)
try
{
    {
        UInt8 json_object[] = {0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0};
        JsonBinary json_binary(JsonBinary::TYPE_CODE_OBJECT, StringRef(json_object, 8));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == "{}");
    }

    {
        UInt8 json_object[] = {0x1, 0x0, 0x0, 0x0, 0x16, 0x0, 0x0, 0x0, 0x13, 0x0, 0x0, 0x0, 0x1, 0x0, 0xc, 0x14, 0x0, 0x0, 0x0, 0x61, 0x1, 0x62};
        JsonBinary json_binary(JsonBinary::TYPE_CODE_OBJECT, StringRef(json_object, sizeof(json_object) / sizeof(UInt8)));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == "{\"a\": \"b\"}");
    }

    {
        UInt8 json_object[] = {0x1, 0x0, 0x0, 0x0, 0x1c, 0x0, 0x0, 0x0, 0x13, 0x0, 0x0, 0x0, 0x1, 0x0, 0x9, 0x14, 0x0, 0x0, 0x0, 0x61, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
        JsonBinary json_binary(JsonBinary::TYPE_CODE_OBJECT, StringRef(json_object, sizeof(json_object) / sizeof(UInt8)));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == "{\"a\": 3}");
    }

    {
        UInt8 json_object[] = {0x1, 0x0, 0x0, 0x0, 0x14, 0x0, 0x0, 0x0, 0x13, 0x0, 0x0, 0x0, 0x1, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x61};
        JsonBinary json_binary(JsonBinary::TYPE_CODE_OBJECT, StringRef(json_object, sizeof(json_object) / sizeof(UInt8)));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == "{\"a\": null}");
    }
}
CATCH

TEST_F(TestJsonBinary, TestUnquoteArray)
try
{
    {
        UInt8 json_array[] = {0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0};
        JsonBinary json_binary(JsonBinary::TYPE_CODE_ARRAY, StringRef(json_array, sizeof(json_array) / sizeof(UInt8)));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == "[]");
    }

    {
        UInt8 json_array[] = {0x2, 0x0, 0x0, 0x0, 0x16, 0x0, 0x0, 0x0, 0xc, 0x12, 0x0, 0x0, 0x0, 0xc, 0x14, 0x0, 0x0, 0x0, 0x1, 0x61, 0x1, 0x62};
        JsonBinary json_binary(JsonBinary::TYPE_CODE_ARRAY, StringRef(json_array, sizeof(json_array) / sizeof(UInt8)));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == "[\"a\", \"b\"]");
    }

    {
        UInt8 json_array[] = {0x1, 0x0, 0x0, 0x0, 0xd, 0x0, 0x0, 0x0, 0x4, 0x1, 0x0, 0x0, 0x0};
        JsonBinary json_binary(JsonBinary::TYPE_CODE_ARRAY, StringRef(json_array, sizeof(json_array) / sizeof(UInt8)));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == "[true]");
    }

    {
        UInt8 json_array[] = {0x1, 0x0, 0x0, 0x0, 0x15, 0x0, 0x0, 0x0, 0x9, 0xd, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
        JsonBinary json_binary(JsonBinary::TYPE_CODE_ARRAY, StringRef(json_array, sizeof(json_array) / sizeof(UInt8)));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == "[3]");
    }
}
CATCH

TEST_F(TestJsonBinary, TestUnquoteMixed)
try
{
    {
        UInt8 json_array[] = {
            0x3, 0x0, 0x0, 0x0, 0x31, 0x0, 0x0, 0x0, 0xc, 0x17, 0x0, 0x0, 0x0, 0xc, 0x19, 0x0, 0x0, 0x0, 0x1, 0x1b,
            0x0, 0x0, 0x0, 0x1, 0x61, 0x1, 0x62, 0x1, 0x0, 0x0, 0x0, 0x16, 0x0, 0x0, 0x0, 0x13, 0x0, 0x0, 0x0, 0x1,
            0x0, 0xc, 0x14, 0x0, 0x0, 0x0, 0x61, 0x1, 0x62
        };
        JsonBinary json_binary(JsonBinary::TYPE_CODE_ARRAY, StringRef(json_array, sizeof(json_array) / sizeof(UInt8)));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == "[\"a\", \"b\", {\"a\": \"b\"}]");
    }

    {
        UInt8 json_array[] = {
            0x4, 0x0, 0x0, 0x0, 0x44, 0x0, 0x0, 0x0, 0x9, 0x1c, 0x0, 0x0, 0x0, 0xb, 0x24, 0x0, 0x0, 0x0, 0xc, 0x2c, 0x0, 0x0, 0x0, 0x1,
            0x2e, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x40, 0x1, 0x33, 0x1, 0x0,
            0x0, 0x0, 0x16, 0x0, 0x0, 0x0, 0x13, 0x0, 0x0, 0x0, 0x1, 0x0, 0xc, 0x14, 0x0, 0x0, 0x0, 0x61, 0x1, 0x62
        };
        JsonBinary json_binary(JsonBinary::TYPE_CODE_ARRAY, StringRef(json_array, sizeof(json_array) / sizeof(UInt8)));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == "[3, 3, \"3\", {\"a\": \"b\"}]");
    }

    {
        UInt8 json_array[] = {
            0x2, 0x0, 0x0, 0x0, 0x63, 0x0, 0x0, 0x0, 0xc, 0x12, 0x0, 0x0, 0x0, 0x1, 0x14, 0x0, 0x0, 0x0, 0x1, 0x61, 0x1, 0x0, 0x0, 0x0,
            0x4f, 0x0, 0x0, 0x0, 0x13, 0x0, 0x0, 0x0, 0x1, 0x0, 0x3, 0x14, 0x0, 0x0, 0x0, 0x61, 0x3, 0x0, 0x0, 0x0, 0x3b, 0x0, 0x0, 0x0,
            0xb, 0x17, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x40, 0x1,
            0x0, 0x0, 0x0, 0x1c, 0x0, 0x0, 0x0, 0x13, 0x0, 0x0, 0x0, 0x1, 0x0, 0xb, 0x14, 0x0, 0x0, 0x0, 0x62, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x10, 0x40
        };
        JsonBinary json_binary(JsonBinary::TYPE_CODE_ARRAY, StringRef(json_array, sizeof(json_array) / sizeof(UInt8)));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == "[\"a\", {\"a\": [3, null, {\"b\": 4}]}]");
    }

    {
        UInt8 json_array[] = {
            0x1, 0x0, 0x0, 0x0, 0x4f, 0x0, 0x0, 0x0, 0x13, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x14, 0x0, 0x0, 0x0, 0x62, 0x1, 0x0, 0x0,
            0x0, 0x3b, 0x0, 0x0, 0x0, 0x13, 0x0, 0x0, 0x0, 0x1, 0x0, 0x3, 0x14, 0x0, 0x0, 0x0, 0x63, 0x3, 0x0, 0x0, 0x0, 0x27, 0x0,
            0x0, 0x0, 0x9, 0x17, 0x0, 0x0, 0x0, 0xb, 0x1f, 0x0, 0x0, 0x0, 0x4, 0x1, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0xc0
        };
        JsonBinary json_binary(JsonBinary::TYPE_CODE_OBJECT, StringRef(json_array, sizeof(json_array) / sizeof(UInt8)));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == "{\"b\": {\"c\": [3, -3, true]}}");
    }

    {
        UInt8 json_array[] = {
            0x1, 0x0, 0x0, 0x0, 0x74, 0x0, 0x0, 0x0, 0x13, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x14, 0x0, 0x0, 0x0, 0x62, 0x1, 0x0, 0x0,
            0x0, 0x60, 0x0, 0x0, 0x0, 0x13, 0x0, 0x0, 0x0, 0x1, 0x0, 0x3, 0x14, 0x0, 0x0, 0x0, 0x63, 0x3, 0x0, 0x0, 0x0, 0x4c, 0x0,
            0x0, 0x0, 0x9, 0x17, 0x0, 0x0, 0x0, 0xb, 0x1f, 0x0, 0x0, 0x0, 0xc, 0x27, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0xc0, 0x24, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x22, 0x65, 0x73, 0x63, 0x61,
            0x70, 0x65, 0x64, 0x20, 0xe4, 0xbd, 0xa0, 0xe5, 0xa5, 0xbd, 0x20, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x20, 0x77,
            0x6f, 0x72, 0x6c, 0x64
        };
        JsonBinary json_binary(JsonBinary::TYPE_CODE_OBJECT, StringRef(json_array, sizeof(json_array) / sizeof(UInt8)));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == "{\"b\": {\"c\": [3, -3, \"hello, \\\"escaped 你好 quotes\\\" world\"]}}");
    }
}
CATCH

TEST_F(TestJsonBinary, TestUnquoteDateAndTime)
try
{
    {
        UInt8 json_date[8] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x7e, 0x98, 0x1f};
        String expected = "2022-01-31";
        JsonBinary json_binary(JsonBinary::TYPE_CODE_DATE, StringRef(json_date, 8));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == expected);
    }

    {
        UInt8 json_date[] = {0x20, 0x4d, 0x0, 0x14, 0x35, 0x7e, 0x98, 0x1f};
        String expected = "2022-01-31 03:20:20.001234";
        JsonBinary json_binary(JsonBinary::TYPE_CODE_DATETIME, StringRef(json_date, sizeof(json_date) / sizeof(UInt8)));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == expected);
    }

    {
        UInt8 json_date[] = {0x20, 0x4d, 0x0, 0x14, 0x35, 0xfe, 0x98, 0x1f};
        String expected = "2022-03-31 03:20:20.001234";
        JsonBinary json_binary(JsonBinary::TYPE_CODE_TIMESTAMP, StringRef(json_date, sizeof(json_date) / sizeof(UInt8)));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == expected);
    }
}
CATCH

TEST_F(TestJsonBinary, TestUnquoteDuration)
try
{
    {
        UInt8 json_duration[] = {0x50, 0x58, 0xe1, 0x78, 0xf7, 0xa, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0};
        String expected = "03:20:58.001234";
        JsonBinary json_binary(JsonBinary::TYPE_CODE_DURATION, StringRef(json_duration, sizeof(json_duration) / sizeof(UInt8)));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == expected);
    }

    {
        UInt8 json_duration[] = {0xb0, 0xa7, 0x1e, 0x87, 0x8, 0xf5, 0xff, 0xff, 0x6, 0x0, 0x0, 0x0};
        String expected = "-03:20:58.001234";
        JsonBinary json_binary(JsonBinary::TYPE_CODE_DURATION, StringRef(json_duration, sizeof(json_duration) / sizeof(UInt8)));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == expected);
    }
}
CATCH

TEST_F(TestJsonBinary, TestUnquoteOpaque)
try
{
    {
        UInt8 json_opaque[] = {0xe9, 0x1, 0x39};
        String expected = "base64:type233:OQ==";
        JsonBinary json_binary(JsonBinary::TYPE_CODE_OPAQUE, StringRef(json_opaque, sizeof(json_opaque) / sizeof(UInt8)));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == expected);
    }

    {
        UInt8 json_opaque[] = {
            0xe9, 0x80, 0x1, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
            0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
            0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
            0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
            0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
            0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
            0x39, 0x39, 0x39, 0x39, 0x39
        };
        String expected = "base64:type233:OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk=";
        JsonBinary json_binary(JsonBinary::TYPE_CODE_OPAQUE, StringRef(json_opaque, sizeof(json_opaque) / sizeof(UInt8)));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == expected);
    }
}
CATCH

TEST_F(TestJsonBinary, TestUnquoteString)
try
{
    {
        UInt8 json_string[] = {
            0x0
        };
        String expected;
        JsonBinary json_binary(JsonBinary::TYPE_CODE_STRING, StringRef(json_string, sizeof(json_string) / sizeof(UInt8)));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == expected);
    }

    {
        UInt8 json_string[] = {
            0xa, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x57, 0x6f, 0x72, 0x6c, 0x64
        };
        String expected = "HelloWorld";
        JsonBinary json_binary(JsonBinary::TYPE_CODE_STRING, StringRef(json_string, sizeof(json_string) / sizeof(UInt8)));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == expected);
    }

    {
        UInt8 json_string[] = {
            0x6, 0xe4, 0xbd, 0xa0, 0xe5, 0xa5, 0xbd
        };
        String expected = "你好";
        JsonBinary json_binary(JsonBinary::TYPE_CODE_STRING, StringRef(json_string, sizeof(json_string) / sizeof(UInt8)));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == expected);
    }

    {
        UInt8 json_string[] = {
            0x1d, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x22, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x64, 0x20, 0x71, 0x75, 0x6f,
            0x74, 0x65, 0x73, 0x22, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64
        };
        String expected = "hello, \"escaped quotes\" world";
        JsonBinary json_binary(JsonBinary::TYPE_CODE_STRING, StringRef(json_string, sizeof(json_string) / sizeof(UInt8)));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == expected);
    }

    {
        UInt8 json_string[] = {
            0x24, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x22, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x64, 0x20, 0xe4, 0xbd, 0xa0,
            0xe5, 0xa5, 0xbd, 0x20, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64
        };
        String expected = "hello, \"escaped 你好 quotes\" world";
        JsonBinary json_binary(JsonBinary::TYPE_CODE_STRING, StringRef(json_string, sizeof(json_string) / sizeof(UInt8)));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == expected);
    }

    {
        UInt8 json_string[] = {
            0x1, 0x27
        };
        String expected = "'";
        JsonBinary json_binary(JsonBinary::TYPE_CODE_STRING, StringRef(json_string, sizeof(json_string) / sizeof(UInt8)));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == expected);
    }

    {
        UInt8 json_string[] = {
            0x2, 0x27, 0x27
        };
        String expected = "''";
        JsonBinary json_binary(JsonBinary::TYPE_CODE_STRING, StringRef(json_string, sizeof(json_string) / sizeof(UInt8)));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == expected);
    }

    {
        UInt8 json_string[] = {
            0x4, 0x61, 0xa, 0x62, 0x5c
        };
        String expected = "a\nb\\";
        JsonBinary json_binary(JsonBinary::TYPE_CODE_STRING, StringRef(json_string, sizeof(json_string) / sizeof(UInt8)));
        auto str = JsonBinary::unquoteString(json_binary.toString());
        ASSERT_TRUE(str == expected);
    }
}
CATCH

} // namespace tests
} // namespace DB