// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dmfile.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dmfile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dmfile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dmfile_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dmfile_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dmfile_2eproto;
namespace dtpb {
class PackProperty;
class PackPropertyDefaultTypeInternal;
extern PackPropertyDefaultTypeInternal _PackProperty_default_instance_;
class PackPropertys;
class PackPropertysDefaultTypeInternal;
extern PackPropertysDefaultTypeInternal _PackPropertys_default_instance_;
}  // namespace dtpb
PROTOBUF_NAMESPACE_OPEN
template<> ::dtpb::PackProperty* Arena::CreateMaybeMessage<::dtpb::PackProperty>(Arena*);
template<> ::dtpb::PackPropertys* Arena::CreateMaybeMessage<::dtpb::PackPropertys>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dtpb {

// ===================================================================

class PackProperty :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtpb.PackProperty) */ {
 public:
  PackProperty();
  virtual ~PackProperty();

  PackProperty(const PackProperty& from);
  PackProperty(PackProperty&& from) noexcept
    : PackProperty() {
    *this = ::std::move(from);
  }

  inline PackProperty& operator=(const PackProperty& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackProperty& operator=(PackProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PackProperty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackProperty* internal_default_instance() {
    return reinterpret_cast<const PackProperty*>(
               &_PackProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PackProperty* other);
  friend void swap(PackProperty& a, PackProperty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PackProperty* New() const final {
    return CreateMaybeMessage<PackProperty>(nullptr);
  }

  PackProperty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PackProperty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PackProperty& from);
  void MergeFrom(const PackProperty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PackProperty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtpb.PackProperty";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dmfile_2eproto);
    return ::descriptor_table_dmfile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 num_rows = 1;
  bool has_num_rows() const;
  void clear_num_rows();
  static const int kNumRowsFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 num_rows() const;
  void set_num_rows(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:dtpb.PackProperty)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_rows_;
  friend struct ::TableStruct_dmfile_2eproto;
};
// -------------------------------------------------------------------

class PackPropertys :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtpb.PackPropertys) */ {
 public:
  PackPropertys();
  virtual ~PackPropertys();

  PackPropertys(const PackPropertys& from);
  PackPropertys(PackPropertys&& from) noexcept
    : PackPropertys() {
    *this = ::std::move(from);
  }

  inline PackPropertys& operator=(const PackPropertys& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackPropertys& operator=(PackPropertys&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PackPropertys& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackPropertys* internal_default_instance() {
    return reinterpret_cast<const PackPropertys*>(
               &_PackPropertys_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PackPropertys* other);
  friend void swap(PackPropertys& a, PackPropertys& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PackPropertys* New() const final {
    return CreateMaybeMessage<PackPropertys>(nullptr);
  }

  PackPropertys* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PackPropertys>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PackPropertys& from);
  void MergeFrom(const PackPropertys& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PackPropertys* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtpb.PackPropertys";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dmfile_2eproto);
    return ::descriptor_table_dmfile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dtpb.PackProperty property = 1;
  int property_size() const;
  void clear_property();
  static const int kPropertyFieldNumber = 1;
  ::dtpb::PackProperty* mutable_property(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtpb::PackProperty >*
      mutable_property();
  const ::dtpb::PackProperty& property(int index) const;
  ::dtpb::PackProperty* add_property();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtpb::PackProperty >&
      property() const;

  // @@protoc_insertion_point(class_scope:dtpb.PackPropertys)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtpb::PackProperty > property_;
  friend struct ::TableStruct_dmfile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PackProperty

// required int64 num_rows = 1;
inline bool PackProperty::has_num_rows() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackProperty::clear_num_rows() {
  num_rows_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PackProperty::num_rows() const {
  // @@protoc_insertion_point(field_get:dtpb.PackProperty.num_rows)
  return num_rows_;
}
inline void PackProperty::set_num_rows(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  num_rows_ = value;
  // @@protoc_insertion_point(field_set:dtpb.PackProperty.num_rows)
}

// -------------------------------------------------------------------

// PackPropertys

// repeated .dtpb.PackProperty property = 1;
inline int PackPropertys::property_size() const {
  return property_.size();
}
inline void PackPropertys::clear_property() {
  property_.Clear();
}
inline ::dtpb::PackProperty* PackPropertys::mutable_property(int index) {
  // @@protoc_insertion_point(field_mutable:dtpb.PackPropertys.property)
  return property_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtpb::PackProperty >*
PackPropertys::mutable_property() {
  // @@protoc_insertion_point(field_mutable_list:dtpb.PackPropertys.property)
  return &property_;
}
inline const ::dtpb::PackProperty& PackPropertys::property(int index) const {
  // @@protoc_insertion_point(field_get:dtpb.PackPropertys.property)
  return property_.Get(index);
}
inline ::dtpb::PackProperty* PackPropertys::add_property() {
  // @@protoc_insertion_point(field_add:dtpb.PackPropertys.property)
  return property_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtpb::PackProperty >&
PackPropertys::property() const {
  // @@protoc_insertion_point(field_list:dtpb.PackPropertys.property)
  return property_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dtpb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dmfile_2eproto
