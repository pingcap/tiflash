// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dmfile.proto

#include "dmfile.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace dtpb {
constexpr PackProperty::PackProperty(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gc_hint_version_(PROTOBUF_ULONGLONG(0))
  , num_rows_(PROTOBUF_ULONGLONG(0)){}
struct PackPropertyDefaultTypeInternal {
  constexpr PackPropertyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PackPropertyDefaultTypeInternal() {}
  union {
    PackProperty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PackPropertyDefaultTypeInternal _PackProperty_default_instance_;
constexpr PackProperties::PackProperties(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : property_(){}
struct PackPropertiesDefaultTypeInternal {
  constexpr PackPropertiesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PackPropertiesDefaultTypeInternal() {}
  union {
    PackProperties _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PackPropertiesDefaultTypeInternal _PackProperties_default_instance_;
}  // namespace dtpb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dmfile_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_dmfile_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dmfile_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dmfile_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::dtpb::PackProperty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dtpb::PackProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dtpb::PackProperty, gc_hint_version_),
  PROTOBUF_FIELD_OFFSET(::dtpb::PackProperty, num_rows_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtpb::PackProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dtpb::PackProperties, property_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::dtpb::PackProperty)},
  { 9, -1, sizeof(::dtpb::PackProperties)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dtpb::_PackProperty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dtpb::_PackProperties_default_instance_),
};

const char descriptor_table_protodef_dmfile_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014dmfile.proto\022\004dtpb\"9\n\014PackProperty\022\027\n\017"
  "gc_hint_version\030\001 \002(\004\022\020\n\010num_rows\030\002 \002(\004\""
  "6\n\016PackProperties\022$\n\010property\030\001 \003(\0132\022.dt"
  "pb.PackProperty"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dmfile_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dmfile_2eproto = {
  false, false, 135, descriptor_table_protodef_dmfile_2eproto, "dmfile.proto", 
  &descriptor_table_dmfile_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_dmfile_2eproto::offsets,
  file_level_metadata_dmfile_2eproto, file_level_enum_descriptors_dmfile_2eproto, file_level_service_descriptors_dmfile_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_dmfile_2eproto_getter() {
  return &descriptor_table_dmfile_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dmfile_2eproto(&descriptor_table_dmfile_2eproto);
namespace dtpb {

// ===================================================================

class PackProperty::_Internal {
 public:
  using HasBits = decltype(std::declval<PackProperty>()._has_bits_);
  static void set_has_gc_hint_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PackProperty::PackProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dtpb.PackProperty)
}
PackProperty::PackProperty(const PackProperty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gc_hint_version_, &from.gc_hint_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_rows_) -
    reinterpret_cast<char*>(&gc_hint_version_)) + sizeof(num_rows_));
  // @@protoc_insertion_point(copy_constructor:dtpb.PackProperty)
}

void PackProperty::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gc_hint_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_rows_) -
    reinterpret_cast<char*>(&gc_hint_version_)) + sizeof(num_rows_));
}

PackProperty::~PackProperty() {
  // @@protoc_insertion_point(destructor:dtpb.PackProperty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PackProperty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PackProperty::ArenaDtor(void* object) {
  PackProperty* _this = reinterpret_cast< PackProperty* >(object);
  (void)_this;
}
void PackProperty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PackProperty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PackProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:dtpb.PackProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gc_hint_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_rows_) -
        reinterpret_cast<char*>(&gc_hint_version_)) + sizeof(num_rows_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PackProperty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 gc_hint_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_gc_hint_version(&has_bits);
          gc_hint_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 num_rows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_rows(&has_bits);
          num_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PackProperty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtpb.PackProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 gc_hint_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_gc_hint_version(), target);
  }

  // required uint64 num_rows = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_num_rows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtpb.PackProperty)
  return target;
}

size_t PackProperty::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dtpb.PackProperty)
  size_t total_size = 0;

  if (_internal_has_gc_hint_version()) {
    // required uint64 gc_hint_version = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gc_hint_version());
  }

  if (_internal_has_num_rows()) {
    // required uint64 num_rows = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num_rows());
  }

  return total_size;
}
size_t PackProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtpb.PackProperty)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 gc_hint_version = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gc_hint_version());

    // required uint64 num_rows = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num_rows());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PackProperty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dtpb.PackProperty)
  GOOGLE_DCHECK_NE(&from, this);
  const PackProperty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PackProperty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dtpb.PackProperty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dtpb.PackProperty)
    MergeFrom(*source);
  }
}

void PackProperty::MergeFrom(const PackProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dtpb.PackProperty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gc_hint_version_ = from.gc_hint_version_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_rows_ = from.num_rows_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PackProperty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dtpb.PackProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackProperty::CopyFrom(const PackProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtpb.PackProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackProperty::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PackProperty::InternalSwap(PackProperty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PackProperty, num_rows_)
      + sizeof(PackProperty::num_rows_)
      - PROTOBUF_FIELD_OFFSET(PackProperty, gc_hint_version_)>(
          reinterpret_cast<char*>(&gc_hint_version_),
          reinterpret_cast<char*>(&other->gc_hint_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PackProperty::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dmfile_2eproto_getter, &descriptor_table_dmfile_2eproto_once,
      file_level_metadata_dmfile_2eproto[0]);
}

// ===================================================================

class PackProperties::_Internal {
 public:
};

PackProperties::PackProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  property_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dtpb.PackProperties)
}
PackProperties::PackProperties(const PackProperties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_(from.property_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dtpb.PackProperties)
}

void PackProperties::SharedCtor() {
}

PackProperties::~PackProperties() {
  // @@protoc_insertion_point(destructor:dtpb.PackProperties)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PackProperties::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PackProperties::ArenaDtor(void* object) {
  PackProperties* _this = reinterpret_cast< PackProperties* >(object);
  (void)_this;
}
void PackProperties::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PackProperties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PackProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:dtpb.PackProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PackProperties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dtpb.PackProperty property = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PackProperties::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtpb.PackProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dtpb.PackProperty property = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_property(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtpb.PackProperties)
  return target;
}

size_t PackProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtpb.PackProperties)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dtpb.PackProperty property = 1;
  total_size += 1UL * this->_internal_property_size();
  for (const auto& msg : this->property_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PackProperties::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dtpb.PackProperties)
  GOOGLE_DCHECK_NE(&from, this);
  const PackProperties* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PackProperties>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dtpb.PackProperties)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dtpb.PackProperties)
    MergeFrom(*source);
  }
}

void PackProperties::MergeFrom(const PackProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dtpb.PackProperties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_.MergeFrom(from.property_);
}

void PackProperties::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dtpb.PackProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackProperties::CopyFrom(const PackProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtpb.PackProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackProperties::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(property_)) return false;
  return true;
}

void PackProperties::InternalSwap(PackProperties* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  property_.InternalSwap(&other->property_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PackProperties::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dmfile_2eproto_getter, &descriptor_table_dmfile_2eproto_once,
      file_level_metadata_dmfile_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dtpb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dtpb::PackProperty* Arena::CreateMaybeMessage< ::dtpb::PackProperty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtpb::PackProperty >(arena);
}
template<> PROTOBUF_NOINLINE ::dtpb::PackProperties* Arena::CreateMaybeMessage< ::dtpb::PackProperties >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtpb::PackProperties >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
