# Copyright 2022 PingCAP, Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Preparation.
=> DBGInvoke __enable_schema_sync_service('true')

=> DBGInvoke __drop_tidb_table(default, test)
=> drop table if exists default.test

=> DBGInvoke __set_flush_threshold(1000000, 1000000)

# Data.
=> DBGInvoke __mock_tidb_table(default, test, 'col_1 String, col_2 String')
=> DBGInvoke __refresh_mapped_table_schema(default, test)
=> DBGInvoke __put_region(4, 0, 100, default, test)
=> DBGInvoke __raft_insert_row(default, test, 4, 50, 'aaa', 'bbb')
=> DBGInvoke __raft_insert_row(default, test, 4, 51, 'AAA', 'bbb')
=> DBGInvoke __raft_insert_row(default, test, 4, 52, 'aaa', 'BBB')
=> DBGInvoke __raft_insert_row(default, test, 4, 53, 'AAA', 'BBB')
=> DBGInvoke __raft_insert_row(default, test, 4, 54, 'Aab', 'bBa')
=> DBGInvoke __raft_insert_row(default, test, 4, 55, 'bAb', 'ABa')
=> DBGInvoke __raft_insert_row(default, test, 4, 56, 'bbA', 'AAB')

# general ci collation
# test string compare
=> DBGInvoke dag('select * from default.test where col_1 = \'aaa\'',4,'collator:-45') 
┌─col_1─┬─col_2─┐
│ aaa   │ bbb   │
│ AAA   │ bbb   │
│ aaa   │ BBB   │
│ AAA   │ BBB   │
└───────┴───────┘

# test string compare
=> DBGInvoke dag('select * from default.test where col_2 > \'aaa\'',4,'collator:-45') 
┌─col_1─┬─col_2─┐
│ aaa   │ bbb   │
│ AAA   │ bbb   │
│ aaa   │ BBB   │
│ AAA   │ BBB   │
│ Aab   │ bBa   │
│ bAb   │ ABa   │
│ bbA   │ AAB   │
└───────┴───────┘

# test string compare
=> DBGInvoke dag('select * from default.test where col_1 < \'BBB\'',4,'collator:-45') 
┌─col_1─┬─col_2─┐
│ aaa   │ bbb   │
│ AAA   │ bbb   │
│ aaa   │ BBB   │
│ AAA   │ BBB   │
│ Aab   │ bBa   │
│ bAb   │ ABa   │
│ bbA   │ AAB   │
└───────┴───────┘

# test string in
=> DBGInvoke dag('select * from default.test where col_1 in (\'aaa\',\'aab\',\'bbb\')',4,'collator:-45') 
┌─col_1─┬─col_2─┐
│ aaa   │ bbb   │
│ AAA   │ bbb   │
│ aaa   │ BBB   │
│ AAA   │ BBB   │
│ Aab   │ bBa   │
└───────┴───────┘

# test string like
=> DBGInvoke dag('select * from default.test where col_1 like \'aa%\'',4,'collator:-45') 
┌─col_1─┬─col_2─┐
│ aaa   │ bbb   │
│ AAA   │ bbb   │
│ aaa   │ BBB   │
│ AAA   │ BBB   │
│ Aab   │ bBa   │
└───────┴───────┘

# test string min/max
=> DBGInvoke dag('select min(col_1),max(col_1),min(col_2),max(col_2) from default.test',4,'collator:-45') 
┌─min(col_1)─┬─max(col_1)─┬─min(col_2)─┬─max(col_2)─┐
│ aaa        │ bbA        │ AAB        │ bbb        │
└────────────┴────────────┴────────────┴────────────┘

# binary with padding collation
# test string compare
=> DBGInvoke dag('select * from default.test where col_1 = \'aaa \'',4,'collator:-46') 
┌─col_1─┬─col_2─┐
│ aaa   │ bbb   │
│ aaa   │ BBB   │
└───────┴───────┘

# test string compare
=> DBGInvoke dag('select * from default.test where col_2 > \'aaa \'',4,'collator:-46') 
┌─col_1─┬─col_2─┐
│ aaa   │ bbb   │
│ AAA   │ bbb   │
│ Aab   │ bBa   │
└───────┴───────┘

# test string compare
=> DBGInvoke dag('select * from default.test where col_1 < \'BBB \'',4,'collator:-46') 
┌─col_1─┬─col_2─┐
│ AAA   │ bbb   │
│ AAA   │ BBB   │
│ Aab   │ bBa   │
└───────┴───────┘

# test string in
=> DBGInvoke dag('select * from default.test where col_1 in (\'aaa \',\'aab \',\'bbb \')',4,'collator:-46') 
┌─col_1─┬─col_2─┐
│ aaa   │ bbb   │
│ aaa   │ BBB   │
└───────┴───────┘

# test string like
# padding does not work for like, the same behavior as in mysql
=> DBGInvoke dag('select * from default.test where col_1 like \'aa% \'',4,'collator:-46') 
=> DBGInvoke dag('select * from default.test where col_1 like \'aa%\'',4,'collator:-46') 
┌─col_1─┬─col_2─┐
│ aaa   │ bbb   │
│ aaa   │ BBB   │
└───────┴───────┘

# test string min/max
=> DBGInvoke dag('select min(col_1),max(col_1),min(col_2),max(col_2) from default.test',4,'collator:-46') 
┌─min(col_1)─┬─max(col_1)─┬─min(col_2)─┬─max(col_2)─┐
│ AAA        │ bbA        │ AAB        │ bbb        │
└────────────┴────────────┴────────────┴────────────┘

# binary without padding collation
# test string compare
=> DBGInvoke dag('select * from default.test where col_1 = \'aaa\'',4,'collator:-63') 
┌─col_1─┬─col_2─┐
│ aaa   │ bbb   │
│ aaa   │ BBB   │
└───────┴───────┘

# test string compare
=> DBGInvoke dag('select * from default.test where col_2 > \'aaa\'',4,'collator:-63') 
┌─col_1─┬─col_2─┐
│ aaa   │ bbb   │
│ AAA   │ bbb   │
│ Aab   │ bBa   │
└───────┴───────┘

# test string compare
=> DBGInvoke dag('select * from default.test where col_1 < \'BBB\'',4,'collator:-63') 
┌─col_1─┬─col_2─┐
│ AAA   │ bbb   │
│ AAA   │ BBB   │
│ Aab   │ bBa   │
└───────┴───────┘

# test string in
=> DBGInvoke dag('select * from default.test where col_1 in (\'aaa\',\'aab\',\'bbb\')',4,'collator:-63') 
┌─col_1─┬─col_2─┐
│ aaa   │ bbb   │
│ aaa   │ BBB   │
└───────┴───────┘

# test string like
# padding does not work for like, the same behavior as in mysql
=> DBGInvoke dag('select * from default.test where col_1 like \'aa%\'',4,'collator:-63') 
┌─col_1─┬─col_2─┐
│ aaa   │ bbb   │
│ aaa   │ BBB   │
└───────┴───────┘

# test string min/max
=> DBGInvoke dag('select min(col_1),max(col_1),min(col_2),max(col_2) from default.test',4,'collator:-63') 
┌─min(col_1)─┬─max(col_1)─┬─min(col_2)─┬─max(col_2)─┐
│ AAA        │ bbA        │ AAB        │ bbb        │
└────────────┴────────────┴────────────┴────────────┘

# Clean up.
=> DBGInvoke __drop_tidb_table(default, test)
=> drop table if exists default.test
