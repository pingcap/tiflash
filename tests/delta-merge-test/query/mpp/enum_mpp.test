# Copyright 2022 PingCAP, Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Preparation.
=> DBGInvoke __enable_schema_sync_service('true')

=> DBGInvoke __drop_tidb_table(default, test1)
=> drop table if exists default.test1
=> DBGInvoke __drop_tidb_table(default, test2)
=> drop table if exists default.test2

=> DBGInvoke __set_flush_threshold(1000000, 1000000)

# Data.
=> DBGInvoke __mock_tidb_table(default, test1, 'col_1 Int64, col_2 Enum16(\'male\' = 1, \'female\' = 2, \'both\' = 3, \'unknown\' = 4)')
=> DBGInvoke __refresh_mapped_table_schema(default, test1)
=> DBGInvoke __put_region(4, 0, 100, default, test1)
=> DBGInvoke __put_region(5, 100, 200, default, test1)

=> DBGInvoke __mock_tidb_table(default, test2, 'col_1 Int64, col_2 Enum16(\'male\' = 1, \'female\' = 2, \'both\' = 3, \'unknown\' = 4)')
=> DBGInvoke __refresh_mapped_table_schema(default, test2)
=> DBGInvoke __put_region(6, 0, 100, default, test2)
=> DBGInvoke __put_region(7, 100, 200, default, test2)

=> DBGInvoke __raft_insert_row(default, test1, 4, 52, 1, 1)
=> DBGInvoke __raft_insert_row(default, test1, 4, 53, 2, 2)
=> DBGInvoke __raft_insert_row(default, test1, 5, 152, 3, 1)
=> DBGInvoke __raft_insert_row(default, test1, 5, 153, 4, 2)
=> DBGInvoke __raft_insert_row(default, test1, 5, 154, 5, 3)
=> DBGInvoke __raft_insert_row(default, test2, 6, 52, 1, 1)
=> DBGInvoke __raft_insert_row(default, test2, 6, 53, 2, 2)
=> DBGInvoke __raft_insert_row(default, test2, 7, 152, 3, 1)
=> DBGInvoke __raft_insert_row(default, test2, 7, 153, 4, 2)

# shuffle aggregation
=> DBGInvoke tidb_query('select count(col_1), col_2 from default.test1 group by col_2', 4,'mpp_query:true,mpp_partition_num:2')
┌─exchange_receiver_0─┬─exchange_receiver_1─┐
│                   2 │ female              │
│                   2 │ male                │
│                   1 │ both                │
└─────────────────────┴─────────────────────┘


# shuffle join
=> DBGInvoke tidb_query('select * from default.test1 all inner join default.test2 using col_2', 4,'mpp_query:true,mpp_partition_num:2')
┌─exchange_receiver_0─┬─exchange_receiver_1─┬─exchange_receiver_2─┬─exchange_receiver_3─┐
│                   2 │ female              │                   4 │ female              │
│                   2 │ female              │                   2 │ female              │
│                   4 │ female              │                   4 │ female              │
│                   4 │ female              │                   2 │ female              │
│                   1 │ male                │                   1 │ male                │
│                   1 │ male                │                   3 │ male                │
│                   3 │ male                │                   1 │ male                │
│                   3 │ male                │                   3 │ male                │
└─────────────────────┴─────────────────────┴─────────────────────┴─────────────────────┘

# broadcast join
=> DBGInvoke tidb_query('select * from default.test1 all inner join default.test2 using col_2', 4,'mpp_query:true,mpp_partition_num:2,use_broadcast_join:true')
┌─exchange_receiver_0─┬─exchange_receiver_1─┬─exchange_receiver_2─┬─exchange_receiver_3─┐
│                   2 │ female              │                   4 │ female              │
│                   2 │ female              │                   2 │ female              │
│                   4 │ female              │                   4 │ female              │
│                   4 │ female              │                   2 │ female              │
│                   1 │ male                │                   1 │ male                │
│                   1 │ male                │                   3 │ male                │
│                   3 │ male                │                   1 │ male                │
│                   3 │ male                │                   3 │ male                │
└─────────────────────┴─────────────────────┴─────────────────────┴─────────────────────┘

# Clean up.
=> DBGInvoke __drop_tidb_table(default, test1)
=> drop table if exists default.test1
=> DBGInvoke __drop_tidb_table(default, test2)
=> drop table if exists default.test2