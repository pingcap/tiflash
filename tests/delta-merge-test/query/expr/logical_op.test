# Copyright 2022 PingCAP, Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

=> DBGInvoke __enable_schema_sync_service('true')

=> DBGInvoke __drop_tidb_table(default, test)
=> drop table if exists default.test

=> DBGInvoke __set_flush_threshold(1000000, 1000000)

# Data.
=> DBGInvoke __mock_tidb_table(default, test, 'id Int64, c1 Nullable(Decimal(5,2)), c2 Nullable(Decimal(10,2)), c3 Decimal(30,2), c4 Decimal(40,2), c5 MyDate')
=> DBGInvoke __refresh_mapped_table_schema(default, test)
=> DBGInvoke __put_region(4, 0, 100, default, test)
=> DBGInvoke __raft_insert_row(default, test, 4, 50, 0, 1, 1, 1, 1, '2020-01-01')
=> DBGInvoke __raft_insert_row(default, test, 4, 51, 1, 1, 0, 1, 0, '0000-00-00')
=> DBGInvoke __raft_insert_row(default, test, 4, 52, 2, 1, null, 1, 0, '0000-00-00')
=> DBGInvoke __raft_insert_row(default, test, 4, 53, 3, 0, 1, 0, 1, '2020-01-01')
=> DBGInvoke __raft_insert_row(default, test, 4, 54, 4, 0, 0, 0, 0, '0000-00-00')
=> DBGInvoke __raft_insert_row(default, test, 4, 55, 5, 0, null, 0, 0, '0000-00-00')
=> DBGInvoke __raft_insert_row(default, test, 4, 56, 6, null, 1, 0, 1, '2020-01-01')
=> DBGInvoke __raft_insert_row(default, test, 4, 57, 7, null, 0, 0, 0, '0000-00-00')
=> DBGInvoke __raft_insert_row(default, test, 4, 58, 8, null, null, 0, 0, '0000-00-00')

=> DBGInvoke dag('select and(c1,c2), and(c3,c5), and(c2,c4), or(c1,c2), or(c3,c5), or(c2,c4), xor(c1,c2), xor(c3,c5), xor(c2,c4), not(c1), not(c2), not(c3), not(c4), not(c5) from default.test', 4)
┌─and(c1, c2)─┬─and(c3, c5)─┬─and(c2, c4)─┬─or(c1, c2)─┬─or(c3, c5)─┬─or(c2, c4)─┬─xor(c1, c2)─┬─xor(c3, c5)─┬─xor(c2, c4)─┬─not(c1)─┬─not(c2)─┬─not(c3)─┬─not(c4)─┬─not(c5)─┐
│           1 │           1 │           1 │          1 │          1 │          1 │           0 │           0 │           0 │       0 │       0 │       0 │       0 │       0 │
│           0 │           0 │           0 │          1 │          1 │          0 │           1 │           1 │           0 │       0 │       1 │       0 │       1 │       1 │
│          \N │           0 │           0 │          1 │          1 │         \N │          \N │           1 │          \N │       0 │      \N │       0 │       1 │       1 │
│           0 │           0 │           1 │          1 │          1 │          1 │           1 │           1 │           0 │       1 │       0 │       1 │       0 │       0 │
│           0 │           0 │           0 │          0 │          0 │          0 │           0 │           0 │           0 │       1 │       1 │       1 │       1 │       1 │
│           0 │           0 │           0 │         \N │          0 │         \N │          \N │           0 │          \N │       1 │      \N │       1 │       1 │       1 │
│          \N │           0 │           1 │          1 │          1 │          1 │          \N │           1 │           0 │      \N │       0 │       1 │       0 │       0 │
│           0 │           0 │           0 │         \N │          0 │          0 │          \N │           0 │           0 │      \N │       1 │       1 │       1 │       1 │
│          \N │           0 │           0 │         \N │          0 │         \N │          \N │           0 │          \N │      \N │      \N │       1 │       1 │       1 │
└─────────────┴─────────────┴─────────────┴────────────┴────────────┴────────────┴─────────────┴─────────────┴─────────────┴─────────┴─────────┴─────────┴─────────┴─────────┘
# Clean up.
=> DBGInvoke __drop_tidb_table(default, test)
=> drop table if exists default.test
=> drop table if exists logical_op_test
