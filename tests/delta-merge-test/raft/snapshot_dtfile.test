# Disable background schema sync to test schema sync triggled by applying snapshot
=> DBGInvoke __enable_schema_sync_service('false')
=> DBGInvoke __drop_tidb_table(default, test)
=> drop table if exists default.test
=> DBGInvoke __clean_up_region()

#####
## Pre-handle region to dt files then apply
=> DBGInvoke __mock_tidb_table(default, test, 'col_1 Int64', '', 'dt')
=> DBGInvoke __refresh_schemas()
=> DBGInvoke __region_snapshot(4, 0, 10000, default, test)
=> DBGInvoke region_snapshot_pre_handle_file(default, test, 4, 3, 6, 'col_1 Int64', '')
┌─region_snapshot_pre_handle_file(default, test, 4, 3, 6)────────┐
│ Generate 1 files for [region_id=4]                             │
└────────────────────────────────────────────────────────────────┘
=> DBGInvoke __region_snapshot_apply_file(4)
=> select * from default.test
┌─col_1─┬─_tidb_rowid─┐
│    -3 │           3 │
│    -4 │           4 │
│    -5 │           5 │
└───────┴─────────────┘

#####
## Mock to test idempotence of applying snapshot
=> DBGInvoke region_snapshot_pre_handle_file(default, test, 4, 3, 6, 'col_1 Int64', '')
┌─region_snapshot_pre_handle_file(default, test, 4, 3, 6)────────┐
│ Generate 1 files for [region_id=4]                             │
└────────────────────────────────────────────────────────────────┘
## Mock that we crashed before applying first snapshot, then replay the process of apply snapshot
=> DBGInvoke region_snapshot_pre_handle_file(default, test, 4, 3, 6, 'col_1 Int64', '')
┌─region_snapshot_pre_handle_file(default, test, 4, 3, 6)────────┐
│ Generate 1 files for [region_id=4]                             │
└────────────────────────────────────────────────────────────────┘
=> DBGInvoke __region_snapshot_apply_file(4)
=> select * from default.test
┌─col_1─┬─_tidb_rowid─┐
│    -3 │           3 │
│    -4 │           4 │
│    -5 │           5 │
└───────┴─────────────┘


#####
### Mock to test apply snapshot with multiple schema
=> DBGInvoke __add_column_to_tidb_table(default, test, 'col_2 String')
=> DBGInvoke __add_column_to_tidb_table(default, test, 'col_3 UInt64')
=> DBGInvoke region_snapshot_pre_handle_file(default, test, 4, 3, 12, 'col_1 Int64, col_2 String, col_3 UInt64', '', 3)
┌─region_snapshot_pre_handle_file(default, test, 4, 3, 12, "col_1 Int64, col_2 String, col_3 UInt64", "", 3)─┐
│ Generate 1 files for [region_id=4]                                                                         │
└────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
=> DBGInvoke region_snapshot_apply_file(4)
┌─__region_snapshot_apply_file(4)──────┐
│ success apply region 4 with dt files │
└──────────────────────────────────────┘
=> select * from default.test
┌─col_1─┬─_tidb_rowid─┬─col_2─┬─col_3─┐
│    -3 │           3 │       │     0 │
│    -4 │           4 │       │     0 │
│    -5 │           5 │       │     0 │
│    -6 │           6 │ _6    │     0 │
│    -7 │           7 │ _7    │     0 │
│    -8 │           8 │ _8    │     0 │
│    -9 │           9 │ _9    │     4 │
│   -10 │          10 │ _10   │     5 │
│   -11 │          11 │ _11   │     5 │
└───────┴─────────────┴───────┴───────┘

#####
## Recreate test table
=> DBGInvoke __drop_tidb_table(default, test)
=> drop table if exists default.test
=> DBGInvoke __mock_tidb_table(default, test, 'col_1 Int64', '', 'dt')
=> DBGInvoke __refresh_schemas()
=> DBGInvoke __region_snapshot(4, 0, 10000, default, test)
## Mock to test apply snapshot with an older schema (case 1 - add column)
=> DBGInvoke __add_column_to_tidb_table(default, test, 'col_2 String')
=> DBGInvoke __add_column_to_tidb_table(default, test, 'col_3 UInt64')
=> DBGInvoke region_snapshot_pre_handle_file(default, test, 4, 3, 12, 'col_1 Int64, col_2 String, col_3 UInt64', '', 3)
┌─region_snapshot_pre_handle_file(default, test, 4, 3, 12, "col_1 Int64, col_2 String, col_3 UInt64", "", 3)─┐
│ Generate 1 files for [region_id=4]                                                                         │
└────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
## Add column so that we should fill defaut value for new-added columns
=> DBGInvoke __add_column_to_tidb_table(default, test, 'col_4 Nullable(UInt64)')
=> DBGInvoke __add_column_to_tidb_table(default, test, 'col_5 Nullable(String)')
=> DBGInvoke __refresh_schemas()
=> DBGInvoke region_snapshot_apply_file(4)
┌─region_snapshot_apply_file(4)────────┐
│ success apply region 4 with dt files │
└──────────────────────────────────────┘
=> select * from default.test
┌─col_1─┬─_tidb_rowid─┬─col_2─┬─col_3─┬─col_4─┬─col_5─┐
│    -3 │           3 │       │     0 │    \N │ \N    │
│    -4 │           4 │       │     0 │    \N │ \N    │
│    -5 │           5 │       │     0 │    \N │ \N    │
│    -6 │           6 │ _6    │     0 │    \N │ \N    │
│    -7 │           7 │ _7    │     0 │    \N │ \N    │
│    -8 │           8 │ _8    │     0 │    \N │ \N    │
│    -9 │           9 │ _9    │     4 │    \N │ \N    │
│   -10 │          10 │ _10   │     5 │    \N │ \N    │
│   -11 │          11 │ _11   │     5 │    \N │ \N    │
└───────┴─────────────┴───────┴───────┴───────┴───────┘

#####
## Recreate test table
=> DBGInvoke __drop_tidb_table(default, test)
=> drop table if exists default.test
=> DBGInvoke __mock_tidb_table(default, test, 'col_1 Int64', '', 'dt')
=> DBGInvoke __refresh_schemas()
=> DBGInvoke __region_snapshot(4, 0, 10000, default, test)
## Mock to test apply snapshot with an older schema (case 2 - drop column)
=> DBGInvoke __add_column_to_tidb_table(default, test, 'col_2 String')
=> DBGInvoke __add_column_to_tidb_table(default, test, 'col_3 UInt64')
=> DBGInvoke region_snapshot_pre_handle_file(default, test, 4, 3, 12, 'col_1 Int64, col_2 String, col_3 UInt64', '', 3)
┌─region_snapshot_pre_handle_file(default, test, 4, 3, 12, "col_1 Int64, col_2 String, col_3 UInt64", "", 3)─┐
│ Generate 1 files for [region_id=4]                                                                         │
└────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
## Drop column so that the Raft data always contain more column for decoding
=> DBGInvoke __drop_column_from_tidb_table(default, test, col_2)
=> DBGInvoke __refresh_schemas()
=> DBGInvoke region_snapshot_apply_file(4)
┌─region_snapshot_apply_file(4)────────┐
│ success apply region 4 with dt files │
└──────────────────────────────────────┘
=> select * from default.test
┌─col_1─┬─_tidb_rowid─┬─col_3─┐
│    -3 │           3 │     0 │
│    -4 │           4 │     0 │
│    -5 │           5 │     0 │
│    -6 │           6 │     0 │
│    -7 │           7 │     0 │
│    -8 │           8 │     0 │
│    -9 │           9 │     4 │
│   -10 │          10 │     5 │
│   -11 │          11 │     5 │
└───────┴─────────────┴───────┘

#####
## Test that BR/lightning may only ingest sst files of write cf into tikv without default cf
=> DBGInvoke __drop_tidb_table(default, test)
=> drop table if exists default.test
=> DBGInvoke __mock_tidb_table(default, test, 'col_1 Int64', '', 'dt')
=> DBGInvoke __refresh_schemas()
=> DBGInvoke __region_snapshot(4, 0, 10000, default, test)
# Only the sst files of write cf ingested and send to TiFlash as a snapshot, no panic, and those uncommitted data remain in memory
=> DBGInvoke __region_snapshot_pre_handle_file(default, test, 4, 3, 12, 'col_1 Int64', '', 1, 'write')
=> DBGInvoke __region_snapshot_apply_file(4)
# There should be no committed rows ingested
=> select * from default.test

# Apply a snapshot with write & default cfs
=> DBGInvoke __region_snapshot_pre_handle_file(default, test, 4, 3, 12, 'col_1 Int64', '', 1, 'write,default')
=> DBGInvoke __region_snapshot_apply_file(4)
=> select * from default.test
┌─col_1─┬─_tidb_rowid─┐
│    -3 │           3 │
│    -4 │           4 │
│    -5 │           5 │
│    -6 │           6 │
│    -7 │           7 │
│    -8 │           8 │
│    -9 │           9 │
│   -10 │          10 │
│   -11 │          11 │
└───────┴─────────────┘

#####
## Mock to test some boundary of handling snapshot with same rowkey with different versions
## selraw will ignore 'delete_range', so rebuild the table first
=> DBGInvoke __drop_tidb_table(default, test)
=> drop table if exists default.test
=> DBGInvoke __mock_tidb_table(default, test, 'col_1 Int64', '', 'dt')
=> DBGInvoke __refresh_schemas()
=> DBGInvoke __region_snapshot(4, 0, 10000, default, test)
=> DBGInvoke __region_snapshot_pre_handle_file_pks(default, test, 4, 'col_1 Int64', '', 3,4,5, 5,5,5, 5,6,7, 8,9)
=> DBGInvoke __region_snapshot_apply_file(4)
# In DeltaTree, we store data by rowkey asc, tso asc
=> selraw *, _INTERNAL_VERSION from default.test
┌─col_1─┬─_tidb_rowid─┬─_INTERNAL_VERSION─┐
│    -3 │           3 │            100111 │
│    -4 │           4 │            100110 │
│    -5 │           5 │            100105 │
│    -5 │           5 │            100106 │
│    -5 │           5 │            100107 │
│    -5 │           5 │            100108 │
│    -5 │           5 │            100109 │
│    -6 │           6 │            100104 │
│    -7 │           7 │            100103 │
│    -8 │           8 │            100102 │
│    -9 │           9 │            100101 │
└───────┴─────────────┴───────────────────┘
# Filtered by MVCC
=> select *, _INTERNAL_VERSION from default.test
┌─col_1─┬─_tidb_rowid─┬─_INTERNAL_VERSION─┐
│    -3 │           3 │            100111 │
│    -4 │           4 │            100110 │
│    -5 │           5 │            100109 │
│    -6 │           6 │            100104 │
│    -7 │           7 │            100103 │
│    -8 │           8 │            100102 │
│    -9 │           9 │            100101 │
└───────┴─────────────┴───────────────────┘

=> DBGInvoke __drop_tidb_table(default, test)
=> drop table if exists default.test
=> DBGInvoke __enable_schema_sync_service('true')
