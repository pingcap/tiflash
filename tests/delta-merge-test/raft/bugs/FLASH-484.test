# Copyright 2022 PingCAP, Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

## disable schema sync and automatic flush
=> DBGInvoke __enable_schema_sync_service('false')
=> DBGInvoke __set_flush_threshold(1000000, 1000000)

## clean up
=> DBGInvoke __drop_tidb_table(default, test)
=> drop table if exists default.test


## create a DeltaMerge table
=> DBGInvoke __mock_tidb_table(default, test, 'col_1 String', '', 'dt')
=> DBGInvoke __refresh_mapped_table_schema(default, test)

=> DBGInvoke __put_region(4, 0, 100, default, test)

## insert data and get exception, then rowid==51 is not flush to Storage
=> DBGInvoke __enable_fail_point(exception_during_write_to_storage)
=> DBGInvoke __raft_insert_row(default, test, 4, 51, 'test51')
Received exception from server (version {#WORD}):
Code: {#WORD} DB::Exception: Received from {#WORD} DB::Exception: Fail point FailPoints::exception_during_write_to_storage is triggered..

>> DBGInvoke query_mapped('select count(*) from \$d.\$t', default, test)
┌─count()─┐
│       0 │
└─────────┘


## insert more data, and this time we get all 3 rows(including rowid==51) flush to Storage
=> DBGInvoke __raft_insert_row(default, test, 4, 52, 'test52')
=> DBGInvoke __raft_insert_row(default, test, 4, 19, 'test19')

>> DBGInvoke query_mapped('select * from \$d.\$t order by _tidb_rowid', default, test)
┌─col_1──┬─_tidb_rowid─┐
│ test19 │          19 │
│ test51 │          51 │
│ test52 │          52 │
└────────┴─────────────┘


## clean up
=> DBGInvoke __drop_tidb_table(default, test)
=> drop table if exists default.test
