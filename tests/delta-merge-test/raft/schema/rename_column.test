# Copyright 2022 PingCAP, Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Preparation.
=> DBGInvoke __enable_schema_sync_service('false')

=> DBGInvoke __drop_tidb_table(default, test)
=> DBGInvoke __refresh_schemas()

=> DBGInvoke __set_flush_threshold(1000000, 1000000)

# create table and insert some rows
=> DBGInvoke __mock_tidb_table(default, test, 'col_1 String, col_2 Int8', '', 'dt')
=> DBGInvoke __refresh_mapped_table_schema(default, test)
=> DBGInvoke __put_region(4, 0, 100, default, test)
=> DBGInvoke __raft_insert_row(default, test, 4, 50, 'test', 1)
=> DBGInvoke __raft_insert_row(default, test, 4, 51, 'test', 2)
=> DBGInvoke __try_flush_region(4)

=> DBGInvoke query_mapped('select tidb_database,tidb_name,engine from system.tables where database=''\$d'' and name=''\$t''', default, test)
┌─database─┬─name─┬─engine─────┐
│ default  │ test │ DeltaMerge │
└──────────┴──────┴────────────┘

=> DBGInvoke query_mapped('select * from \$d.\$t', default, test)
┌─col_1─┬─col_2─┬─_tidb_rowid─┐
│ test  │     1 │          50 │
│ test  │     2 │          51 │
└───────┴───────┴─────────────┘

# test cyclic rename
=> DBGInvoke __rename_column_in_tidb_table(default, test, col_1, col_3)
=> DBGInvoke __rename_column_in_tidb_table(default, test, col_2, col_1)
=> DBGInvoke __rename_column_in_tidb_table(default, test, col_3, col_2)
=> DBGInvoke __modify_column_in_tidb_table(default, test, 'col_1 Nullable(Int32)')
=> DBGInvoke __modify_column_in_tidb_table(default, test, 'col_2 Nullable(String)')

# test doesn't check column name, so we select columns one by one.
=> DBGInvoke query_mapped('select col_2 from \$d.\$t', default, test)
┌─col_2─┐
│ test  │
│ test  │
└───────┘
=> DBGInvoke query_mapped('select col_1 from \$d.\$t', default, test)
┌─col_1─┐
│     1 │
│     2 │
└───────┘

=> DBGInvoke __drop_tidb_table(default, test)
=> DBGInvoke __refresh_schemas()

=> DBGInvoke __mock_tidb_table(default, test, 'col_1 String, col_2 Int8', '', 'dt')
=> DBGInvoke __refresh_mapped_table_schema(default, test)

=> DBGInvoke __put_region(4, 0, 100, default, test)
=> DBGInvoke __raft_insert_row(default, test, 4, 50, 'test', 1)
=> DBGInvoke __raft_insert_row(default, test, 4, 51, 'test', 2)
=> DBGInvoke __try_flush_region(4)

=> DBGInvoke query_mapped('select tidb_database,tidb_name,engine from system.tables where database=''\$d'' and name=''\$t''', default, test)
┌─database─┬─name─┬─engine─────┐
│ default  │ test │ DeltaMerge │
└──────────┴──────┴────────────┘
=> DBGInvoke query_mapped('select * from \$d.\$t', default, test)
┌─col_1─┬─col_2─┬─_tidb_rowid─┐
│ test  │     1 │          50 │
│ test  │     2 │          51 │
└───────┴───────┴─────────────┘

# test change nullable firstly, then rename cyclic.

=> DBGInvoke __modify_column_in_tidb_table(default, test, 'col_1 Nullable(String)')
=> DBGInvoke __modify_column_in_tidb_table(default, test, 'col_2 Nullable(Int32)')

=> DBGInvoke query_mapped('select * from \$d.\$t', default, test)
┌─col_1─┬─col_2─┬─_tidb_rowid─┐
│ test  │     1 │          50 │
│ test  │     2 │          51 │
└───────┴───────┴─────────────┘

=> DBGInvoke __rename_column_in_tidb_table(default, test, col_1, col_3)
=> DBGInvoke __rename_column_in_tidb_table(default, test, col_2, col_1)
=> DBGInvoke __rename_column_in_tidb_table(default, test, col_3, col_2)

=> DBGInvoke query_mapped('select col_2 from \$d.\$t', default, test)
┌─col_2─┐
│ test  │
│ test  │
└───────┘
=> DBGInvoke query_mapped('select col_1 from \$d.\$t', default, test)
┌─col_1─┐
│     1 │
│     2 │
└───────┘

=> DBGInvoke __drop_tidb_table(default, test)
=> DBGInvoke __refresh_schemas()


=> DBGInvoke __mock_tidb_table(default, test, 'col_1 String, col_2 Int8', '', 'dt')
=> DBGInvoke __refresh_mapped_table_schema(default, test)

=> DBGInvoke __put_region(4, 0, 100, default, test)
=> DBGInvoke __raft_insert_row(default, test, 4, 50, 'test', 1)
=> DBGInvoke __raft_insert_row(default, test, 4, 51, 'test', 2)
=> DBGInvoke __try_flush_region(4)

=> DBGInvoke query_mapped('select tidb_database,tidb_name,engine from system.tables where database=''\$d'' and name=''\$t''', default, test)
┌─database─┬─name─┬─engine─────┐
│ default  │ test │ DeltaMerge │
└──────────┴──────┴────────────┘

=> DBGInvoke query_mapped('select * from \$d.\$t', default, test)
┌─col_1─┬─col_2─┬─_tidb_rowid─┐
│ test  │     1 │          50 │
│ test  │     2 │          51 │
└───────┴───────┴─────────────┘

# test drop and then rename and then create

=> DBGInvoke __drop_column_from_tidb_table(default, test, col_1)
=> DBGInvoke __rename_column_in_tidb_table(default, test, col_2, col_1)


=> DBGInvoke query_mapped('select col_1 from \$d.\$t', default, test)
┌─col_1─┐
│     1 │
│     2 │
└───────┘
=> DBGInvoke __add_column_to_tidb_table(default, test, 'col_2 Nullable(Int8)')

=> DBGInvoke query_mapped('select col_2 from \$d.\$t', default, test)
┌─col_2─┐
│    \N │
│    \N │
└───────┘
=> DBGInvoke __drop_tidb_table(default, test)
=> DBGInvoke __refresh_schemas()

# do a lot of change and sync at once.

=> DBGInvoke __mock_tidb_table(default, test, 'col_1 String, col_2 Int8', '', 'dt')
=> DBGInvoke __refresh_mapped_table_schema(default, test)

=> DBGInvoke __put_region(4, 0, 100, default, test)
=> DBGInvoke __raft_insert_row(default, test, 4, 50, 'test', 1)
=> DBGInvoke __raft_insert_row(default, test, 4, 51, 'test', 2)
=> DBGInvoke __try_flush_region(4)

=> DBGInvoke query_mapped('select tidb_database,tidb_name,engine from system.tables where database=''\$d'' and name=''\$t''', default, test)
┌─database─┬─name─┬─engine─────┐
│ default  │ test │ DeltaMerge │
└──────────┴──────┴────────────┘
=> DBGInvoke query_mapped('select * from \$d.\$t', default, test)
┌─col_1─┬─col_2─┬─_tidb_rowid─┐
│ test  │     1 │          50 │
│ test  │     2 │          51 │
└───────┴───────┴─────────────┘

# test drop and then rename and then create

=> DBGInvoke __drop_column_from_tidb_table(default, test, col_1)
=> DBGInvoke __rename_column_in_tidb_table(default, test, col_2, col_1)
=> DBGInvoke __add_column_to_tidb_table(default, test, 'col_2 Nullable(Int8) default 0')
=> DBGInvoke __modify_column_in_tidb_table(default, test, 'col_1 Nullable(Int32)')
=> DBGInvoke __put_region(5, 101, 200, default, test)
=> DBGInvoke __raft_insert_row(default, test, 5, 150, NULL, NULL)
=> DBGInvoke __raft_insert_row(default, test, 5, 151, NULL, NULL)
=> DBGInvoke __try_flush_region(5)

=> DBGInvoke query_mapped('select * from \$d.\$t', default, test)
┌─col_1─┬─col_2─┬─_tidb_rowid─┐
│     1 │     0 │          50 │
│     2 │     0 │          51 │
│    \N │    \N │         150 │
│    \N │    \N │         151 │
└───────┴───────┴─────────────┘

=> DBGInvoke __drop_tidb_table(default, test)
=> DBGInvoke __refresh_schemas()

## test for partial-linked rename
=> DBGInvoke __mock_tidb_table(default, test, 'a String, b Int8', '', 'dt')
=> DBGInvoke __refresh_mapped_table_schema(default, test)

=> DBGInvoke __put_region(4, 0, 100, default, test)
=> DBGInvoke __raft_insert_row(default, test, 4, 50, 'test', 1)
=> DBGInvoke __raft_insert_row(default, test, 4, 51, 'test', 2)
=> DBGInvoke __try_flush_region(4)

=> DBGInvoke query_mapped('select tidb_database,tidb_name,engine from system.tables where database=''\$d'' and name=''\$t''', default, test)
┌─database─┬─name─┬─engine─────┐
│ default  │ test │ DeltaMerge │
└──────────┴──────┴────────────┘

=> DBGInvoke query_mapped('select a,b from \$d.\$t order by _tidb_rowid', default, test)
┌─a────┬─b─┐
│ test │ 1 │
│ test │ 2 │
└──────┴───┘

# rename a -> c, and b -> a
=> DBGInvoke __rename_column_in_tidb_table(default, test, a, c)
=> DBGInvoke __rename_column_in_tidb_table(default, test, b, a)

=> DBGInvoke query_mapped('select a,c from \$d.\$t order by _tidb_rowid', default, test)
┌─a─┬─c────┐
│ 1 │ test │
│ 2 │ test │
└───┴──────┘

=> DBGInvoke __drop_tidb_table(default, test)
=> DBGInvoke __refresh_schemas()
