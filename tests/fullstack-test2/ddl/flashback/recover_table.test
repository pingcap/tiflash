# Copyright 2023 PingCAP, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Clean the tombstone table in the testing env
>> DBGInvoke __enable_schema_sync_service('true')
>> DBGInvoke __gc_schemas(18446744073709551615, 'true')

### Case 1
## Test case for applying raft cmd for tombstoned table
mysql> drop table if exists test.t;
mysql> create table test.t(id int);
mysql> alter table test.t set tiflash replica 1;

func> wait_table test t

# Insert a record and Read once (not necessary).
mysql> insert into test.t values (1);
mysql> set session tidb_isolation_read_engines='tiflash'; select * from test.t;
+------+
| id   |
+------+
|    1 |
+------+

# Enable the failpoint and make it pause before applying the raft cmd to write a row
>> DBGInvoke __init_fail_point()
>> DBGInvoke __enable_fail_point(pause_before_apply_raft_cmd)
mysql> insert into test.t values (2);

# Drop table and force sync schema to make sure table in TiFlash is tombstoned.
mysql> drop table test.t;
>> DBGInvoke __refresh_schemas()

# Disable the failpoint to apply writes even if the storage is tombstoned.
>> DBGInvoke __disable_fail_point(pause_before_apply_raft_cmd)

# Recover table and force sync schema to make sure table in TiFlash is recovered.
mysql> recover table test.t;
>> DBGInvoke __refresh_schemas()

# Read again, the record should appear.
mysql> set session tidb_isolation_read_engines='tiflash'; select * from test.t;
+------+
| id   |
+------+
|    1 |
|    2 |
+------+

mysql> drop table if exists test.t;


### Case 2
## Test case for applying raft snapshot for tombstoned table
mysql> create table test.t(id int);
# It is important that TiFlash has synced the table schema
>> DBGInvoke __refresh_schemas()

# Insert some record
mysql> insert into test.t values (3),(4);

# Enable the failpoint and make it pause before applying the raft snapshot
>> DBGInvoke __init_fail_point()
>> DBGInvoke __enable_fail_point(pause_before_apply_raft_snapshot)
>> DBGInvoke __enable_fail_point(pause_until_apply_raft_snapshot)
mysql> alter table test.t set tiflash replica 1;

# Drop table and force sync schema to make sure table in TiFlash is tombstoned.
mysql> drop table test.t;
>> DBGInvoke __refresh_schemas()

# Wait for a while so that the region snapshot is sent to TiFlash by the Region leader
SLEEP 3
# Disable the failpoint to apply writes even if the storage is tombstoned.
>> DBGInvoke __disable_fail_point(pause_before_apply_raft_snapshot)

# Wait till the snapshot is applied
>> DBGInvoke __wait_fail_point(pause_until_apply_raft_snapshot)

# Recover table and force sync schema to make sure table in TiFlash is recovered.
mysql> recover table test.t;
>> DBGInvoke __refresh_schemas()

func> wait_table test t

# Read again, the record should appear.
mysql> set session tidb_isolation_read_engines='tiflash'; select * from test.t;
+------+
| id   |
+------+
|    3 |
|    4 |
+------+

mysql> drop table if exists test.t;


### Case 3
## drop table arrive tiflash before ddl and insert, and do recover, check the data is not lost
mysql> drop table if exists test.t_drop; 
mysql> create table test.t_drop(a int, b int);
mysql> alter table test.t_drop set tiflash replica 1;
mysql> insert into test.t_drop values(1, 1);

func> wait_table test t_drop

>> DBGInvoke __enable_schema_sync_service('false') 
>> DBGInvoke __init_fail_point()

mysql> alter table test.t_drop add column c int;

>> DBGInvoke __enable_fail_point(pause_before_apply_raft_cmd)

# exactly write until fail point "pause_before_apply_raft_cmd" to be disable
mysql> insert into test.t_drop values(1,2,3);

mysql> drop table test.t_drop;

>> DBGInvoke __refresh_schemas()

# make write cmd take effect
>> DBGInvoke __disable_fail_point(pause_before_apply_raft_cmd)

## wait the insert finish
SLEEP 3

# check the table is tombstone
>> select tidb_database,tidb_name from system.tables where tidb_database = 'test' and tidb_name = 't_drop' and is_tombstone = 0

mysql> recover table test.t_drop;

# we should be able to read the data on column `c`
mysql> set session tidb_isolation_read_engines='tiflash';select * from test.t_drop;
+----+-----+------+
| a  |  b  |  c   |
+----+-----+------+
|  1 |   1 | NULL |
|  1 |   2 |   3  |
+----+-----+------+

mysql> drop table test.t_drop;

>> DBGInvoke __refresh_schemas()
>> select tidb_database,tidb_name from system.tables where tidb_database = 'test' and tidb_name = 't_drop'
┌─tidb_database─┬─tidb_name─┐
│ test          │ t_drop    │
└───────────────┴───────────┘

>> DBGInvoke __enable_schema_sync_service('true') 
>> DBGInvoke __gc_schemas(18446744073709551615, 'true')

# check the table is physically dropped
>> select tidb_database,tidb_name from system.tables where tidb_database = 'test' and tidb_name = 't_drop'

# re-enable
>> DBGInvoke __enable_schema_sync_service('true')
