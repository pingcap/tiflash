# Copyright 2022 PingCAP, Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# related to drop table.
#    if we drop the table without tiflash storage, it works well 
#    if we drop the table with tiflash storage, it works well, and check the tombstone in TiFlash

mysql> drop table if exists test.t1;
mysql> create table test.t1(a int primary key, b decimal(5,2) not NULL, c varchar(10), d int default 0);
mysql> insert into test.t1 values(1, 1.1, 'a', 1);
mysql> drop table test.t1;

mysql> drop table if exists test.t2;
mysql> create table test.t2(a int primary key, b decimal(5,2) not NULL, c varchar(10), d int default 0);
mysql> alter table test.t2 set tiflash replica 1; 
mysql> drop table test.t2;

mysql> drop table if exists test.t3;
mysql> create table test.t3(a int primary key, b decimal(5,2) not NULL, c varchar(10), d int default 0);
mysql> alter table test.t3 set tiflash replica 1; 
mysql> insert into test.t3 values(1, 1.1, 'a', 1);
func> wait_table test t3

mysql> set session tidb_isolation_read_engines='tiflash';select * from test.t3;
+----+-----+------+------+
| a  |  b  |  c   |   d  |
+----+-----+------+------+
|  1 |1.10 |   a  |  1   |
+----+-----+------+------+

>> select tidb_database,tidb_name from system.tables where tidb_database = 'test' and tidb_name = 't3' and is_tombstone = 0
┌─tidb_database─┬─tidb_name─┐
│ test          │ t3        │
└───────────────┴───────────┘

mysql> drop table test.t3;

=> DBGInvoke __refresh_schemas()

>> select tidb_database,tidb_name from system.tables where tidb_database = 'test' and tidb_name = 't3' and is_tombstone = 0


## drop table arrive tiflash before ddl and insert, and do recover, check the data is not lost
## because we want to test we actually drop the table, so please not use the same name for this table
mysql> drop table if exists test.t_drop; 
mysql> create table test.t_drop(a int, b int);
mysql> alter table test.t_drop set tiflash replica 1;
mysql> insert into test.t_drop values(1, 1);

func> wait_table test t_drop

=> DBGInvoke __enable_schema_sync_service('false') 
=> DBGInvoke __init_fail_point()

mysql> alter table test.t_drop add column c int;

>> DBGInvoke __enable_fail_point(pause_before_apply_raft_cmd)

# exactly write until fail point "pause_before_apply_raft_cmd" to be disable
mysql> insert into test.t_drop values(1,2,3);

mysql> drop table test.t_drop;

=> DBGInvoke __refresh_schemas()

# make write cmd take effect
>> DBGInvoke __disable_fail_point(pause_before_apply_raft_cmd)

## wait the insert finish
SLEEP 3

# check the table is tombstone
>> select tidb_database,tidb_name from system.tables where tidb_database = 'test' and tidb_name = 't_drop' and is_tombstone = 0

mysql> recover table test.t_drop;

mysql> set session tidb_isolation_read_engines='tiflash';select * from test.t_drop;
+----+-----+------+
| a  |  b  |  c   |
+----+-----+------+
|  1 |   1 | NULL |
|  1 |   2 |   3  |
+----+-----+------+

mysql> drop table test.t_drop;

=> DBGInvoke __refresh_schemas()
>> select tidb_database,tidb_name from system.tables where tidb_database = 'test' and tidb_name = 't_drop'
┌─tidb_database─┬─tidb_name─┐
│ test          │ t_drop    │
└───────────────┴───────────┘

=> DBGInvoke __enable_schema_sync_service('true') 
=> DBGInvoke __gc_schemas(9223372036854775807)

# check the table is physically dropped
>> select tidb_database,tidb_name from system.tables where tidb_database = 'test' and tidb_name = 't_drop'