# Copyright 2022 PingCAP, Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

mysql> drop table if exists test.t;

### Test case for applying raft cmd for tombstoned table
mysql> create table test.t(id int);
mysql> alter table test.t set tiflash replica 1;

func> wait_table test t

# Disable flushing.
>> DBGInvoke __set_flush_threshold(1000000, 1000000)

# Insert a record and Read once (not necessary).
mysql> insert into test.t values (1);
mysql> set session tidb_isolation_read_engines='tiflash'; select * from test.t;
+------+
| id   |
+------+
|    1 |
+------+
# Flush the record into storage.
>> DBGInvoke __try_flush()

# Enable the failpoint and make it pause before applying the raft cmd to write a row
>> DBGInvoke __init_fail_point()
>> DBGInvoke __enable_fail_point(pause_before_apply_raft_cmd)
mysql> insert into test.t values (2);

# Drop table and force sync schema to make sure table in TiFlash is tombstoned.
mysql> drop table test.t;
>> DBGInvoke __refresh_schemas()

# Disable the failpoint to apply writes even if the storage is tombstoned.
>> DBGInvoke __disable_fail_point(pause_before_apply_raft_cmd)

# Recover table and force sync schema to make sure table in TiFlash is recovered.
mysql> recover table test.t;
>> DBGInvoke __refresh_schemas()

# Read again, the record should appear.
mysql> set session tidb_isolation_read_engines='tiflash'; select * from test.t;
+------+
| id   |
+------+
|    1 |
|    2 |
+------+

mysql> drop table if exists test.t;


#####
### Test case for applying raft snapshot for tombstoned table
mysql> create table test.t(id int);
# It is important that TiFlash has synced the table schema
>> DBGInvoke __refresh_schemas()

# Insert some record
mysql> insert into test.t values (3),(4);

# Enable the failpoint and make it pause before applying the raft snapshot
>> DBGInvoke __init_fail_point()
>> DBGInvoke __enable_fail_point(pause_before_apply_raft_snapshot)
>> DBGInvoke __enable_fail_point(pause_until_apply_raft_snapshot)
mysql> alter table test.t set tiflash replica 1;

# Drop table and force sync schema to make sure table in TiFlash is tombstoned.
mysql> drop table test.t;
>> DBGInvoke __refresh_schemas()

# Wait for a while so that the region snapshot is sent to TiFlash by the Region leader
SLEEP 3
# Disable the failpoint to apply writes even if the storage is tombstoned.
>> DBGInvoke __disable_fail_point(pause_before_apply_raft_snapshot)

# Wait till the snapshot is applied
>> DBGInvoke __wait_fail_point(pause_until_apply_raft_snapshot)

# Recover table and force sync schema to make sure table in TiFlash is recovered.
mysql> recover table test.t;
>> DBGInvoke __refresh_schemas()

func> wait_table test t

# Read again, the record should appear.
mysql> set session tidb_isolation_read_engines='tiflash'; select * from test.t;
+------+
| id   |
+------+
|    3 |
|    4 |
+------+

mysql> drop table if exists test.t;
