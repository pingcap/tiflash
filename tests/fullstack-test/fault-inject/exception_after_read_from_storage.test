# Copyright 2023 PingCAP, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Tests for Region meta changed after read from storage
mysql> drop table if exists test.t 

>> DBGInvoke __init_fail_point()

# Ensure that we can create table for that database
mysql> create table test.t(a int not null, b int not null)
mysql> alter table test.t set tiflash replica 1 location labels 'rack', 'host', 'abc'

func> wait_table test t

mysql> insert into test.t values (1, 1),(1, 2)

# This should retry to read normal Regions in local, and read error Regions from remote
>> DBGInvoke __enable_fail_point(region_exception_after_read_from_storage_some_error)

mysql> set session tidb_isolation_read_engines='tiflash'; select * from test.t;
+---+---+
| a | b |
+---+---+
| 1 | 1 |
| 1 | 2 |
+---+---+

# This should retry to read error Regions from remote
>> DBGInvoke __enable_fail_point(region_exception_after_read_from_storage_all_error)

mysql> set session tidb_isolation_read_engines='tiflash'; select * from test.t;
+---+---+
| a | b |
+---+---+
| 1 | 1 |
| 1 | 2 |
+---+---+


# This should first retry in local, then retry from remote because of "all error" in the retry
>> DBGInvoke __enable_fail_point(region_exception_after_read_from_storage_some_error)
>> DBGInvoke __enable_fail_point(region_exception_after_read_from_storage_all_error)

mysql> set session tidb_isolation_read_engines='tiflash'; select * from test.t;
+---+---+
| a | b |
+---+---+
| 1 | 1 |
| 1 | 2 |
+---+---+

mysql> drop table if exists test.t
>> DBGInvoke __disable_fail_point(region_exception_after_read_from_storage_some_error)
>> DBGInvoke __disable_fail_point(region_exception_after_read_from_storage_all_error)
