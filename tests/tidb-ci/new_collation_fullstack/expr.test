mysql> drop table if exists test.t
mysql> create table test.t(id int, value varchar(20) charset utf8mb4 collate utf8mb4_general_ci, value1 varchar(20) charset utf8mb4 collate utf8mb4_bin)
mysql> alter table test.t set tiflash replica 1
mysql> insert into test.t values (1, 'abc', 'abc '),(2, 'Abc', 'abc'),(3,'def', 'def ');
func> wait_table test t

>> DBGInvoke __try_flush()
mysql> set session tidb_isolation_read_engines='tiflash'; select /*+ read_from_storage(tiflash[t]) */ id, value from test.t where value = 'ABC';
+------+-------+
| id   | value |
+------+-------+
|    1 | abc   |
|    2 | Abc   |
+------+-------+

mysql> set session tidb_isolation_read_engines='tiflash'; select /*+ read_from_storage(tiflash[t]) */ id, value1 from test.t where value1 = 'abc';
+------+-------+
| id   | value1|
+------+-------+
|    1 | abc   |
|    2 | abc   |
+------+-------+


mysql> set session tidb_isolation_read_engines='tiflash'; select /*+ read_from_storage(tiflash[t]) */ id, value from test.t where value like 'aB%';
+------+-------+
| id   | value |
+------+-------+
|    1 | abc   |
|    2 | Abc   |
+------+-------+

mysql> set session tidb_isolation_read_engines='tiflash'; select /*+ read_from_storage(tiflash[t]) */ id, value1 from test.t where value1 like 'ab%';
+------+-------+
| id   | value1|
+------+-------+
|    1 | abc   |
|    2 | abc   |
+------+-------+


mysql> set session tidb_isolation_read_engines='tiflash'; select /*+ read_from_storage(tiflash[t]) */ id, value from test.t where value in ('abc','DEF');
+------+-------+
| id   | value |
+------+-------+
|    1 | abc   |
|    2 | Abc   |
|    3 | def   |
+------+-------+

mysql> set session tidb_isolation_read_engines='tiflash'; select /*+ read_from_storage(tiflash[t]) */ id, value1 from test.t where value1 in ('Abc','def');
+------+-------+
| id   | value1|
+------+-------+
|    3 | def   |
+------+-------+

mysql> set session tidb_isolation_read_engines='tiflash'; select /*+ read_from_storage(tiflash[t]) */ min(value),max(value),min(value1),max(value1) from test.t;
+------------+------------+-------------+-------------+
| min(value) | max(value) | min(value1) | max(value1) |
+------------+------------+-------------+-------------+
| abc        | def        | abc         | def         |
+------------+------------+-------------+-------------+

