# Preparation.
=> DBGInvoke __enable_schema_sync_service('true')

=> DBGInvoke __drop_tidb_table(default, test)
=> drop table if exists default.test

=> DBGInvoke __set_flush_threshold(1000000, 1000000)

# Data.
=> DBGInvoke __mock_tidb_table(default, test, 'col_1 MyDate, col_2 MyDatetime(5), col_3 MyDatetime')
=> DBGInvoke __refresh_schemas()
=> DBGInvoke __put_region(4, 0, 100, default, test)
=> DBGInvoke __raft_insert_row(default, test, 4, 50, '2019-06-10', '2019-06-10 09:00:00', '2019-06-10 09:00:00')
=> DBGInvoke __raft_insert_row(default, test, 4, 51, '2019-06-11', '2019-06-11 07:00:00', '2019-06-11 09:00:00')
=> DBGInvoke __raft_insert_row(default, test, 4, 52, '2019-06-11', '2019-06-11 08:00:00', '2019-06-11 09:00:00')
=> DBGInvoke __raft_insert_row(default, test, 4, 53, '2019-06-12', '2019-06-11 08:00:00', '2019-06-11 09:00:00')

=> DBGInvoke dag('select * from default.test') " --dag_planner="optree
┌──────col_1─┬─────────────────────col_2─┬───────────────col_3─┐
│ 2019-06-10 │ 2019-06-10 09:00:00.00000 │ 2019-06-10 09:00:00 │
│ 2019-06-11 │ 2019-06-11 07:00:00.00000 │ 2019-06-11 09:00:00 │
│ 2019-06-11 │ 2019-06-11 08:00:00.00000 │ 2019-06-11 09:00:00 │
│ 2019-06-12 │ 2019-06-11 08:00:00.00000 │ 2019-06-11 09:00:00 │
└────────────┴───────────────────────────┴─────────────────────┘

# use tz_offset, result is the same since cop will convert the timestamp value to utc timestamp when returing to tidb
=> DBGInvoke dag('select * from default.test',4,28800) " --dag_planner="optree
┌──────col_1─┬─────────────────────col_2─┬───────────────col_3─┐
│ 2019-06-10 │ 2019-06-10 09:00:00.00000 │ 2019-06-10 09:00:00 │
│ 2019-06-11 │ 2019-06-11 07:00:00.00000 │ 2019-06-11 09:00:00 │
│ 2019-06-11 │ 2019-06-11 08:00:00.00000 │ 2019-06-11 09:00:00 │
│ 2019-06-12 │ 2019-06-11 08:00:00.00000 │ 2019-06-11 09:00:00 │
└────────────┴───────────────────────────┴─────────────────────┘

=> DBGInvoke dag('select * from default.test where col_2 > col_3') " --dag_planner="optree

=> DBGInvoke dag('select * from default.test where col_2 > col_3',4,28800) " --dag_planner="optree
┌──────col_1─┬─────────────────────col_2─┬───────────────col_3─┐
│ 2019-06-10 │ 2019-06-10 09:00:00.00000 │ 2019-06-10 09:00:00 │
│ 2019-06-11 │ 2019-06-11 07:00:00.00000 │ 2019-06-11 09:00:00 │
│ 2019-06-11 │ 2019-06-11 08:00:00.00000 │ 2019-06-11 09:00:00 │
│ 2019-06-12 │ 2019-06-11 08:00:00.00000 │ 2019-06-11 09:00:00 │
└────────────┴───────────────────────────┴─────────────────────┘

# tz_name overwrite tz_offset
=> DBGInvoke dag('select * from default.test where col_2 > col_3',4,28800,'UTC') " --dag_planner="optree

# ts_col in group by clause
=> DBGInvoke dag('select count(1) from default.test where col_2 > \'2019-06-11 15:00:00\' group by col_2',4,28800) " --dag_planner="optree
┌─count(1)─┬─────────────────────col_2─┐
│        2 │ 2019-06-11 08:00:00.00000 │
└──────────┴───────────────────────────┘

# ts_col in agg clause
=> DBGInvoke dag('select max(col_2) from default.test group by col_1',4,28800) " --dag_planner="optree
┌──────────max(col_2)─┬──────col_1─┐
│ 2019-06-11 08:00:00 │ 2019-06-12 │
│ 2019-06-11 08:00:00 │ 2019-06-11 │
│ 2019-06-10 09:00:00 │ 2019-06-10 │
└─────────────────────┴────────────┘

# Clean up.
=> DBGInvoke __drop_tidb_table(default, test)
=> drop table if exists default.test
